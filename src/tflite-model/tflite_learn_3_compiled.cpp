/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 01.12.2024 15:58:55

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242592;
#else
constexpr int kTensorArenaSize = 241568;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[4] = { 22221, -36814, -39797, -34270, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const TfArray<4, float> quant2_scale = { 4, { 0.00023104036517906934, 0.00016773816605564207, 0.00015305449778679758, 0.00017064018175005913, } };
const TfArray<4, int> quant2_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[4*1*1*32] = { 
  /* [0][0][][] */ 32,-33,-60,-27,126,-30,-26,-39,127,-34,127,80,-43,-10,-21,7,2,-10,-82,2,-19,86,-52,119,1,27,-17,83,123,-44,35,-14, 
  /* [1][0][][] */ 50,68,-88,4,-23,35,108,34,-34,-48,-127,3,81,-36,124,-97,112,-94,14,-36,26,-98,-60,1,-27,-67,48,-102,-76,-115,-27,-27, 
  /* [2][0][][] */ -25,127,18,65,-126,0,98,54,-72,-86,23,-89,-104,67,-94,93,67,91,81,-55,11,8,-7,-19,40,-72,112,-100,-123,36,76,94, 
  /* [3][0][][] */ 80,-72,75,-9,-102,111,39,-4,11,-79,18,85,72,7,-100,-22,112,-72,86,17,-95,-10,19,-11,78,10,-85,73,-127,112,34,34, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 4,1,1,32 } };
const TfArray<4, float> quant3_scale = { 4, { 0.0044619194231927395, 0.0032394086010754108, 0.0029558334499597549, 0.0032954532653093338, } };
const TfArray<4, int> quant3_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 149, 85, 115, -1242, -16, 178, 175, -102, -341, -1348, 503, -1858, 253, -1232, -874, -1342, 281, -938, -617, -1157, -1205, 1447, -1150, -453, 375, -1221, -853, 661, 1096, 541, -675, 294, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.9791375204222277e-05, 6.4154068240895867e-05, 6.7485190811567008e-05, 5.4743723012506962e-05, 7.5099393143318594e-05, 6.2664796132594347e-05, 6.6114640503656119e-05, 5.3627143643097952e-05, 7.4569601565599442e-05, 5.5181033530971035e-05, 5.9067991969641298e-05, 5.5541695473948494e-05, 4.2498129914747551e-05, 5.5735170462867245e-05, 5.6556476920377463e-05, 5.3146439313422889e-05, 4.4977736251894385e-05, 5.9902798966504633e-05, 5.0093607569579035e-05, 5.2662853704532608e-05, 6.3759202021174133e-05, 6.3666047935839742e-05, 5.0421524065313861e-05, 7.9207973612938076e-05, 5.3746451158076525e-05, 5.1127401093253866e-05, 6.0949809267185628e-05, 6.8884131906088442e-05, 8.2798011135309935e-05, 6.4204868976958096e-05, 4.3909330997848883e-05, 6.5833126427605748e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -39,-54,95,12,96,-14,-69,-73,27,-117,-77,9,43,-1,-34,47,-51,-93,-92,-48,-71,-100,-42,101,-127,-13,67,-47,98,0,-19,-79,79,-58,-72,54,-89,-57,-87,9,34,-90,-83,84,50,-98,75,-27,2,-36,-47,63,-60,-62,-78,80,21,54,76,-102,-69,69,-112,44,-16,6,65,83,36,86,71,-94,89,-81,35,75,-96,29,-47,30,50,25,88,2,-57,-108,-85,84,37,115,-10,-97,17,58,28,37, 
  /* [1][0][][] */ -13,11,-29,5,-27,49,-36,-7,62,-127,-63,72,51,-31,28,55,84,-60,-7,76,-17,1,13,34,37,-42,-18,93,6,7,50,-33,43,82,0,14,37,-20,-18,-56,-97,-13,2,-50,-11,47,-11,-37,-48,-101,89,56,15,23,-72,-23,-7,70,23,98,-18,82,-118,-102,-33,38,54,30,78,27,0,4,-85,13,-27,35,88,-26,-22,69,-39,70,-55,-124,29,7,-98,-32,49,51,64,31,50,76,19,-19, 
  /* [2][0][][] */ -16,-45,-34,79,-39,-34,67,59,-118,47,-82,51,31,-24,11,-43,-37,-63,-13,45,-123,-32,57,-1,-8,34,51,4,-48,39,20,26,-72,-62,-127,-72,-48,74,76,-34,-92,-24,43,-11,-69,91,-75,-27,68,9,24,-14,-20,-25,28,-24,-27,47,-35,-25,7,21,-92,53,30,0,26,65,-85,70,-16,-113,35,-35,31,41,-40,-23,-18,30,41,-73,9,-10,31,-118,-19,-31,58,86,6,-9,-39,-41,-61,-14, 
  /* [3][0][][] */ 33,-33,6,-42,-80,16,-113,6,9,-6,25,-21,47,46,32,-22,58,47,-68,-19,62,-95,-85,-114,-52,-115,-90,57,10,-103,44,-18,-70,-56,-42,-35,-101,-46,5,14,-46,-100,-99,-25,34,-4,-67,-96,29,-93,8,-22,50,-8,47,-103,-116,-116,-127,-71,-100,4,-62,34,17,-53,-73,-51,-51,-79,-30,53,-11,-108,16,-65,-2,52,42,-82,-96,-117,1,49,-6,2,-62,-119,-98,4,-30,-109,51,-98,-96,5, 
  /* [4][0][][] */ 15,83,-18,17,-27,-29,41,53,31,122,-19,8,-1,6,-24,-44,-36,30,65,51,58,-48,99,-6,89,72,28,-49,-29,11,-48,-49,32,50,11,-71,-35,56,-9,13,-14,46,-57,-68,8,51,42,79,73,0,48,-3,-60,35,-40,8,82,-72,104,-18,-11,-59,72,-12,-25,18,-15,-41,-1,-70,-26,-52,-37,113,55,23,18,81,2,-38,-11,-39,51,-24,-6,127,59,-13,-18,61,35,6,0,31,-61,84, 
  /* [5][0][][] */ 46,-127,65,67,29,-77,18,50,59,-112,3,-38,8,58,17,33,43,-24,-95,68,10,21,-1,-9,-63,-75,-12,-61,37,23,-1,-79,-30,-23,-55,11,-70,-17,30,4,-104,-43,41,69,-15,19,-25,-38,-85,57,-14,17,35,-39,31,-28,75,31,-30,-39,29,-46,-50,-47,-40,61,-14,23,41,11,68,-52,-29,50,-16,-40,9,-24,9,68,83,35,25,87,-52,-17,0,26,55,-56,84,67,-6,23,53,-36, 
  /* [6][0][][] */ 21,-56,89,61,-46,-40,-17,44,-17,-95,17,-48,58,29,79,-66,34,-38,-39,67,-47,-80,53,53,-23,-86,0,-26,-11,-69,25,-46,-51,-76,-26,-64,-2,20,-77,41,21,30,30,-1,-60,82,-69,-30,-73,5,-18,-33,48,-58,61,-17,8,-4,-40,96,-48,4,-22,-56,-36,48,71,-26,51,7,-69,0,36,-64,-53,-19,-34,-55,-35,-3,35,-1,26,-14,-38,-127,-30,-53,62,67,66,22,-26,-31,59,-2, 
  /* [7][0][][] */ 100,13,-12,-26,-57,92,-64,-9,85,-82,-77,18,44,-102,40,69,50,-50,-76,85,43,13,-40,86,-44,10,39,61,-63,87,-36,29,18,9,46,75,-81,29,-26,-40,8,-77,86,66,54,15,58,-95,-11,-101,-88,-38,-13,15,3,21,69,-73,-10,-10,23,-2,-32,-126,-61,-39,57,20,-89,27,30,57,60,-34,50,51,-25,49,-84,54,86,-12,-31,-77,76,-72,-127,85,61,1,69,65,-45,-19,-2,-48, 
  /* [8][0][][] */ 3,38,-42,-64,31,16,-17,-26,-11,85,25,52,-11,-16,-63,-56,-32,113,30,-1,4,-27,39,49,-79,123,10,29,-46,-4,-41,80,47,-13,15,9,52,7,-19,31,116,127,-80,-84,-22,-31,-7,64,54,7,-3,8,-50,60,-15,-71,92,50,-67,58,48,12,90,63,-5,-37,-24,60,-55,14,10,-5,30,54,-9,1,-42,59,33,26,6,58,-77,-59,2,86,37,-40,8,-36,-59,43,-50,-73,-29,26, 
  /* [9][0][][] */ -27,-18,58,4,36,-115,-70,-118,9,66,-34,16,-53,-93,-112,-54,-22,65,-97,-87,-23,47,-109,-114,63,-27,-43,-12,-42,-79,-98,47,26,-30,-7,-47,-84,-14,-52,-63,18,-86,10,-104,29,-19,-82,8,101,-32,-86,-69,30,-23,-89,49,39,-80,-36,-36,-101,49,112,-87,-93,-30,48,7,-65,45,61,-96,-28,39,-114,-107,-95,-127,-55,50,-5,-10,49,-2,-68,-33,4,-39,53,0,-57,54,53,-30,24,-60, 
  /* [10][0][][] */ -75,9,81,-32,22,65,127,71,8,74,40,-21,55,47,-44,15,-36,48,-93,-44,-33,1,34,-64,18,71,-116,-98,-31,32,-55,-53,66,45,54,103,-22,29,-15,62,33,74,-62,-22,-111,-62,-42,-35,10,34,53,42,61,-4,-39,-58,-35,8,30,-18,3,49,29,52,97,-93,-48,-18,0,-4,-70,-32,72,77,-47,87,-46,12,39,30,73,16,32,89,-67,3,79,-35,39,13,-10,-22,-5,-22,-1,-22, 
  /* [11][0][][] */ 43,-24,-53,37,43,-9,-7,-5,79,29,-103,43,-48,-96,-16,-88,-83,-120,26,-8,4,28,-16,-123,-101,-117,-53,12,16,-43,-27,-61,-108,-101,-2,1,-89,33,-58,-80,-66,31,-100,-27,-69,-72,-109,-110,36,57,39,-6,-118,-103,-30,-23,-82,-85,-51,-104,-98,29,24,-41,-26,27,-70,-21,24,4,-83,-99,-10,54,-118,-3,-84,-7,-67,37,-127,-63,-92,-75,-6,-59,-32,-28,-98,-9,-29,-119,-99,-31,-93,-53, 
  /* [12][0][][] */ 7,59,-43,12,108,9,-26,58,-83,27,6,44,-42,-5,59,-79,-97,-108,-92,-71,33,-34,-30,120,-103,-79,113,-107,92,23,-22,110,-75,-69,-35,10,23,-64,-12,40,70,23,-107,-34,-4,-82,-63,103,-66,-106,-79,84,50,-18,-66,72,-25,-53,16,75,59,127,-100,70,118,38,-33,122,56,111,28,94,92,103,-16,5,-40,59,-104,-100,-48,111,78,46,-50,-33,52,115,-75,-72,94,56,114,-10,46,86, 
  /* [13][0][][] */ 53,-73,50,46,46,57,35,19,30,-83,-21,-49,40,24,22,-71,-123,-55,-84,-6,23,-49,61,-64,-77,8,-26,-13,-95,-98,34,-2,7,50,-45,3,-92,-51,-12,22,-69,37,-69,-21,-62,-10,-33,-49,52,44,-54,-110,-105,5,49,-94,-60,-9,-58,-89,-50,61,-105,-17,-69,-78,-102,36,-59,-41,45,-30,-100,45,-91,-61,-108,30,33,-73,12,-103,46,-12,-94,-127,46,59,-37,-80,-88,13,59,-69,27,-30, 
  /* [14][0][][] */ -20,-70,58,45,65,5,-57,-96,-65,-45,23,95,21,-76,-14,-92,10,-32,12,26,-16,38,-24,91,-109,-72,18,5,-116,-72,-68,48,98,18,-11,14,66,61,-1,-41,-28,-118,4,102,106,-107,104,-73,93,10,74,3,48,30,-2,64,-72,37,14,83,-24,-24,37,14,-39,25,85,-61,-29,-69,-83,85,16,28,10,-75,40,-58,22,7,20,11,-106,-55,-127,-67,-109,125,56,-17,67,-11,84,120,7,19, 
  /* [15][0][][] */ -4,-44,-53,29,50,-84,35,-104,14,43,-81,-13,58,-24,-102,-124,44,55,-93,-13,7,-11,29,57,28,38,1,44,-13,17,34,-80,-21,-18,-80,-27,-86,66,60,-80,43,78,-70,-51,-13,-96,-68,-94,56,-80,-26,3,-110,-56,-66,-37,34,13,-62,71,-70,-83,-48,55,-57,48,-86,-28,-78,-29,22,-88,-15,-53,18,-119,-34,14,53,30,-96,22,-115,-82,-127,-74,-97,19,39,17,-124,-61,21,61,-102,59, 
  /* [16][0][][] */ -72,-56,119,-41,48,107,-67,48,39,-19,-90,80,-14,-57,-49,-44,108,-17,3,64,105,66,-52,68,-16,-1,-59,72,-87,21,26,4,-98,57,56,57,-22,56,-51,-82,-37,-59,90,96,74,111,56,-16,-84,-124,-16,106,-24,53,67,36,25,85,75,25,127,106,-76,54,37,13,-27,95,37,110,-28,-8,31,74,67,95,7,108,-96,7,31,-64,59,25,19,-10,102,19,89,27,-7,120,77,-18,-71,52, 
  /* [17][0][][] */ 15,-51,0,37,-52,-77,-68,-92,10,-10,40,16,52,25,-103,14,8,100,73,62,-88,-27,-11,-59,-3,39,-76,-2,55,-60,-44,36,-41,-21,4,-17,-56,52,-86,-43,-79,-49,-33,-29,-12,-12,127,-100,113,69,-31,-3,-35,104,51,-67,-107,41,-82,-102,1,-89,72,50,-81,-74,10,-89,-100,-24,58,0,-9,-102,-69,26,62,-50,9,-65,-14,-28,-76,-88,-102,45,37,1,-7,34,-91,-106,-30,53,-12,-10, 
  /* [18][0][][] */ -93,22,86,-68,-33,-99,-125,-16,-25,5,-110,-51,-44,20,34,-68,8,-69,1,-40,66,-61,-19,-82,-34,-127,-25,86,5,18,-31,23,32,-44,-118,-105,-39,-21,-38,27,-83,-30,-51,-17,-101,4,-17,-16,-2,-64,25,10,-109,-58,-11,58,-93,13,-61,-111,63,81,-38,-2,-83,-113,-40,55,47,-74,-82,75,-93,-83,-86,-99,40,15,-23,-70,-58,-7,-60,-75,71,-92,43,50,-122,-69,-63,78,60,-61,46,-32, 
  /* [19][0][][] */ -6,3,36,7,23,-91,56,50,49,-11,0,-32,-104,3,-73,24,26,-47,85,22,-44,37,-68,-14,39,-84,-2,-80,-99,-120,-75,14,40,-94,1,-26,-17,-78,-69,-107,37,-114,-90,-16,-96,1,30,-100,-2,18,-56,14,-52,55,-17,-38,-3,54,-25,-46,20,-71,127,28,-83,-29,-47,-29,-37,18,37,-65,-76,-119,-69,-88,-43,-115,-12,62,23,-116,-47,41,-94,45,-15,-30,49,1,-29,27,-50,63,35,-61, 
  /* [20][0][][] */ -11,86,19,36,-81,49,-12,14,-3,7,-78,-19,-25,34,21,-76,-48,14,-50,-47,-2,-49,-68,-73,32,-54,-90,5,-10,-17,-49,67,53,32,-30,16,11,-43,-30,-62,-62,-46,-87,-95,-32,-69,5,47,92,-86,-66,2,8,127,10,-21,37,25,47,65,47,-59,-20,-46,-9,-64,-55,-3,-77,-78,-65,34,-68,-73,-7,-15,48,28,57,45,30,-17,32,-37,14,107,-28,32,-5,46,-5,17,-8,4,-23,-24, 
  /* [21][0][][] */ 66,41,74,-46,62,-24,89,15,11,0,-33,26,-3,56,-64,-26,-59,-4,114,15,81,-29,83,-64,71,-9,-20,96,24,10,36,-3,7,20,-66,-63,110,103,-28,-29,66,54,64,15,-60,-28,-67,114,27,-21,5,116,60,50,-46,34,42,36,-13,93,64,-51,50,41,67,36,-36,-40,-50,27,66,46,42,71,74,78,-49,-18,77,126,37,77,21,-20,72,-47,82,-55,-8,127,112,-67,-49,-40,74,43, 
  /* [22][0][][] */ 1,-73,-89,-109,49,-74,67,22,-108,69,-91,-118,71,-122,-125,-100,8,96,-100,-78,49,-90,1,0,53,-28,-125,59,-77,-94,-82,-120,15,26,-11,-16,-24,-40,-77,-125,12,-35,-25,54,21,-126,52,-45,-43,-97,42,-41,-82,-52,-19,2,20,-53,-46,-53,67,-92,-38,-125,-83,-11,-124,-66,69,63,-47,-29,-84,-20,29,-105,11,-70,28,54,64,-110,-92,-127,41,111,58,-55,-75,1,-83,25,-10,-10,-47,59, 
  /* [23][0][][] */ 92,-29,-13,15,40,-35,-8,-73,24,15,34,27,3,-53,5,-36,75,33,22,43,43,-45,48,-36,-21,62,37,-3,28,12,46,34,-31,72,4,8,37,-17,-73,-9,14,13,-13,-76,-39,-58,127,14,82,18,-20,-44,28,39,-39,61,-58,-26,40,14,-78,-66,43,-18,35,18,-77,-64,37,-26,53,-48,-17,-27,-35,-67,10,-13,40,48,-45,-6,2,-75,39,72,51,-28,-63,10,51,-21,42,-46,-28,31, 
  /* [24][0][][] */ -97,-106,-65,-38,-95,-81,-69,-85,38,28,61,25,86,51,-50,-76,-54,-33,-58,-37,63,-75,-56,-21,58,-76,62,62,94,46,-30,-55,-20,-33,22,29,-34,-69,49,-37,-127,-67,107,14,31,-12,-43,71,-69,-113,-57,36,67,-49,67,-62,1,62,27,-17,90,-2,-38,68,-104,78,-35,-60,-86,62,-43,-43,-22,11,85,98,68,-48,-85,-44,-46,-56,-49,-76,20,-16,-7,-73,26,-73,20,-55,-10,32,-64,52, 
  /* [25][0][][] */ -100,-73,-96,-39,50,-87,-112,18,11,-65,-59,-8,33,-28,-120,-52,-94,91,49,-126,30,44,-39,-79,-23,-62,-115,2,32,-104,7,71,51,-119,8,35,56,-78,-47,-41,-88,61,-121,-26,52,1,29,5,-61,52,-83,58,8,29,-82,-22,16,16,-118,37,71,8,78,9,-26,34,-43,-39,-104,-38,-48,-123,-1,-121,32,-13,30,23,-15,-14,12,12,-74,40,-96,8,-114,-106,-48,-63,50,-10,-127,-42,-44,-106, 
  /* [26][0][][] */ 76,-70,2,-26,-58,-12,-54,-21,-71,-119,70,69,-43,-51,28,0,87,23,-61,-49,38,63,54,29,32,19,21,60,-2,9,-72,15,-3,-16,-49,-72,-43,11,-60,74,-97,61,52,39,-53,78,-2,65,-32,8,24,85,14,-28,-25,-58,41,53,15,75,23,-61,7,-86,99,7,-34,38,-50,52,40,74,45,-127,-55,-17,74,-65,-76,27,-7,59,17,-85,47,-50,-50,26,-107,68,-1,30,-45,88,23,21, 
  /* [27][0][][] */ 2,0,-34,-47,-47,-29,-16,14,13,74,36,-71,-7,49,61,-24,49,-34,46,-25,-63,21,-42,-30,-80,53,-67,-1,58,28,-16,7,61,49,-38,-31,-36,-9,-56,57,-25,-12,19,9,68,-8,24,77,89,56,59,-41,-71,-54,14,-16,81,-10,-61,-54,-41,-30,-1,50,21,-25,-54,78,44,19,-55,36,51,-7,4,-41,24,-9,39,74,62,-4,99,-64,-36,-45,-55,-3,-4,4,-8,-36,53,21,127,64, 
  /* [28][0][][] */ 75,63,31,18,-1,-21,-6,1,-7,7,68,38,-40,15,12,44,23,117,35,32,24,84,18,-74,32,123,-64,-22,-4,-19,56,30,35,54,87,79,23,-15,38,31,119,59,-73,18,-62,-27,26,35,82,5,30,35,-22,48,25,54,112,-16,121,25,-18,-28,51,45,70,54,-27,38,-30,-12,3,46,39,90,1,-52,-69,6,6,28,-42,-40,69,27,26,-1,127,-32,36,42,-24,-48,-1,-3,22,-24, 
  /* [29][0][][] */ -13,-30,52,-8,-80,23,-71,2,31,-32,-91,-81,53,-65,-68,0,-55,23,-61,-23,-117,-49,26,0,-11,-27,-35,-9,-61,-12,38,-33,11,-45,-118,-28,0,84,6,48,-18,102,7,56,1,93,-91,10,23,-34,7,-20,65,-119,95,14,-46,31,-24,41,-53,56,-127,-26,-63,-62,37,75,51,-25,19,-106,94,65,57,44,84,-33,-40,48,22,-49,15,-32,74,20,30,43,-20,84,72,46,-69,29,-35,72, 
  /* [30][0][][] */ 20,-63,-67,14,-99,24,-66,-22,101,-26,-7,-52,-105,-3,53,7,-9,35,71,-119,26,-105,-118,14,-115,9,-67,114,-12,-106,-91,7,-100,-74,-127,-58,14,-44,-16,25,85,-82,-12,97,94,-45,83,47,-69,51,16,-102,85,-54,-22,88,-83,-55,-85,-53,-103,-3,-77,-35,-106,-84,-101,82,-62,93,22,-48,-96,80,33,-95,-58,-74,-75,-63,18,10,-108,-28,-105,16,-120,98,-46,-119,58,54,-40,-4,1,-95, 
  /* [31][0][][] */ 39,-97,41,79,-26,51,-98,-66,-38,-72,-92,-87,56,-81,-61,98,-33,-85,-32,36,15,11,-34,76,48,-127,25,47,-44,-40,-7,64,-28,-18,-118,-7,67,-45,-35,-101,-3,-20,6,38,3,-11,-69,37,56,-32,32,19,-64,-95,-50,8,-94,39,0,77,-6,-12,8,-107,26,70,-21,-42,42,-60,-82,-50,-50,-50,21,20,-13,-40,23,83,-33,-21,25,18,63,4,-117,23,13,-26,-38,-36,-9,82,-40,8, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0021161334589123726, 0.0027265478856861591, 0.0028681205585598946, 0.002326608169823885, 0.0031917241867631674, 0.0026632538065314293, 0.0028098721522837877, 0.0022791535593569279, 0.0031692080665379763, 0.0023451938759535551, 0.0025103895459324121, 0.002360522048547864, 0.0018061705632135272, 0.002368744695559144, 0.0024036501999944448, 0.0022587236016988754, 0.0019115537870675325, 0.0025458689779043198, 0.0021289782598614693, 0.002238171175122261, 0.0027097661513835192, 0.0027058070991188288, 0.0021429148036986589, 0.0033663387876003981, 0.0022842241451144218, 0.0021729145664721727, 0.0025903668720275164, 0.0029275754932314157, 0.003518915269523859, 0.0027287069242447615, 0.0018661464564502239, 0.0027979076839983463, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 735, 61, 3772, 7549, 5286, -3118, 4252, -1131, -3367, 91, 5817, -2636, 4765, 9337, 1890, 3103, -650, -360, -1028, 6221, 2615, -966, 2843, -383, -1452, 3507, 1690, 1658, 4912, 2834, 5998, 1118, 1642, 3111, 3769, 3899, -569, 2154, 4064, -4397, 186, 1890, 184, 2633, -1205, 516, -1405, 411, -4616, 2093, 994, -4084, 6013, -627, 2260, 855, 193, 3112, -1382, -1635, -20, 1773, 920, 4344, 6413, 2788, 2692, 4235, 4590, -1169, 3091, 3547, 4030, -1303, 8893, 5849, 287, -3605, 667, 870, 13398, 2252, -629, -1213, 1395, -45, 1203, -3932, 3450, -1888, 4081, 1081, -497, -2901, -642, 1176, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00018515765259508044, 0.0002007856237469241, 0.0001382037007715553, 8.5770509031135589e-05, 0.0001098495558835566, 0.00013176417269278318, 0.00013601174578070641, 0.0001938818022608757, 0.000136625996674411, 0.00025647188886068761, 0.00010748268687166274, 0.00018860146519728005, 0.00011496584920678288, 6.3418738136533648e-05, 0.00016233421047218144, 0.00012805513688363135, 0.00023694895207881927, 0.00022415744024328887, 0.00023949495516717434, 9.8377597169019282e-05, 0.00016457535093650222, 0.00016973227320704609, 0.00012691717711277306, 0.00017436881898902357, 0.00019509957928676158, 0.00019522735965438187, 0.00017075397772714496, 0.00016016843437682837, 0.00013071448483970016, 0.00015682047524023801, 8.609946962678805e-05, 0.0001667188189458102, 0.00015998361050151289, 0.000177209367393516, 0.00016962525842245668, 0.00011321868805680424, 0.00017352502618450671, 0.00013724816380999982, 0.00010584964911686257, 0.00013534481695387512, 0.00021562103938777, 0.00015002068539615721, 0.00016658779350109398, 0.00011498403910081834, 0.00022202068066690117, 0.00018411992641631514, 0.00016925971431192011, 0.0001847120001912117, 0.00013961958757136017, 0.00014008943981025368, 0.00021619988547172397, 0.00014028641453478485, 9.3892034783493727e-05, 0.00014572848158422858, 0.00015165795048233122, 0.00021599732281174511, 0.00011133798398077488, 0.00012260567746125162, 0.00019865628564730287, 0.00015482885646633804, 0.00016046134987846017, 0.00013746054901275784, 0.00022343773161992431, 0.00015896554396022111, 0.00011720472684828565, 0.00017411005683243275, 0.00014330462727230042, 0.00016028380196075886, 0.00014729023678228259, 0.00012777895608451217, 0.00012284918921068311, 0.00018912505765911192, 0.00012035608961014077, 0.00015215239545796067, 8.3906394138466567e-05, 0.00014030605962034315, 0.00014847156126052141, 0.00017661278252489865, 0.00011062250996474177, 0.0001351867540506646, 5.3767464123666286e-05, 0.00011888138396898285, 0.00017251975077670068, 0.00029435241594910622, 0.00017689129163045436, 0.00012196755415061489, 0.00024323260004166514, 0.00012032523227389902, 0.00014908405137248337, 0.00010435891454108059, 0.00014649279182776809, 0.00016970750584732741, 0.00014251904212869704, 0.00015151509433053434, 0.00019119762873742729, 0.00014338504115585238, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ 3,94,-79,23,61,-25,85,44,-52,14,10,-77,92,127,-54,-8, 
  /* [1][0][][] */ -7,15,-48,-46,-27,38,32,-127,45,-41,-31,-60,5,-75,-61,-15, 
  /* [2][0][][] */ -46,-21,35,78,39,60,-115,127,-9,0,89,-64,-17,-72,-30,91, 
  /* [3][0][][] */ 88,-82,75,-25,-20,-37,-16,127,-6,88,95,30,12,82,42,36, 
  /* [4][0][][] */ -13,2,-10,19,-88,7,-9,-127,19,13,28,-34,50,32,123,91, 
  /* [5][0][][] */ 127,34,-15,1,-98,18,34,75,6,-27,70,81,103,15,-85,18, 
  /* [6][0][][] */ 24,-25,-57,-71,-91,1,16,-57,-70,-49,-42,11,96,46,127,-18, 
  /* [7][0][][] */ -53,22,-19,-53,-6,-38,-79,19,-87,42,-80,-63,-127,-23,32,65, 
  /* [8][0][][] */ 59,39,75,18,58,23,65,4,67,-25,24,2,-127,-24,-70,-4, 
  /* [9][0][][] */ -29,25,-12,-51,-32,0,-3,-1,-44,22,-22,24,22,127,26,31, 
  /* [10][0][][] */ 97,80,-44,35,-64,-1,79,-74,-62,-21,-46,-127,-107,-53,14,103, 
  /* [11][0][][] */ 51,18,58,7,-4,-9,35,109,-57,37,1,-1,-15,-23,58,127, 
  /* [12][0][][] */ -78,-47,-11,36,54,23,127,76,-82,15,5,2,-35,125,-68,110, 
  /* [13][0][][] */ -12,31,64,98,127,72,114,127,-46,118,-126,-89,11,121,-111,-77, 
  /* [14][0][][] */ -127,112,21,15,-16,7,56,15,-30,18,122,-12,-114,13,-48,53, 
  /* [15][0][][] */ -19,-16,-127,-45,69,-42,-70,-45,-19,-29,-18,-76,-15,-94,-67,54, 
  /* [16][0][][] */ 84,-14,9,16,20,-16,44,-2,-16,-4,127,23,18,-29,-38,28, 
  /* [17][0][][] */ 32,37,-24,-74,-39,-28,81,-127,-16,-29,-44,46,37,96,22,37, 
  /* [18][0][][] */ 18,100,-20,-52,78,-57,-41,-35,-36,127,-29,8,-64,49,-2,-32, 
  /* [19][0][][] */ -86,-127,98,-58,70,-103,10,-15,48,22,92,107,-1,-6,52,-19, 
  /* [20][0][][] */ -8,81,59,25,10,-4,14,-19,61,-11,82,-25,-127,-24,-67,-16, 
  /* [21][0][][] */ -72,61,27,-12,64,23,94,42,-127,80,-44,3,-16,4,-44,-5, 
  /* [22][0][][] */ 3,-101,46,33,28,-127,95,17,27,-65,-48,-63,25,-71,-52,-70, 
  /* [23][0][][] */ -62,-108,45,82,45,-21,12,-29,22,-55,95,11,-6,64,65,127, 
  /* [24][0][][] */ -19,8,14,63,46,4,-37,-127,69,24,-34,5,10,-7,-12,-21, 
  /* [25][0][][] */ 13,48,20,-58,-72,16,24,-35,-34,33,-42,-20,49,127,29,-4, 
  /* [26][0][][] */ -51,74,2,35,41,-89,-7,-28,19,13,26,86,48,11,-91,127, 
  /* [27][0][][] */ -20,-127,-76,8,-75,120,20,-76,44,-30,69,-52,40,-87,-102,-17, 
  /* [28][0][][] */ -35,18,51,71,6,21,-13,-127,-95,61,88,-33,89,0,-25,-26, 
  /* [29][0][][] */ -119,86,-16,-16,-7,16,-127,-55,-46,-44,-19,5,-3,-54,-105,37, 
  /* [30][0][][] */ 94,74,-59,109,-127,-92,-98,-8,-44,-13,-23,-123,121,20,-6,77, 
  /* [31][0][][] */ 127,40,-49,-57,-67,8,106,15,-38,4,45,31,56,3,-5,-4, 
  /* [32][0][][] */ -18,-9,127,-18,-12,87,97,6,-3,3,-13,26,23,87,74,32, 
  /* [33][0][][] */ 16,44,-39,-53,-35,24,127,15,11,2,8,-78,93,100,-34,27, 
  /* [34][0][][] */ -68,-5,91,-3,16,-66,127,-13,-114,43,47,-51,57,41,-63,-12, 
  /* [35][0][][] */ -21,51,-20,-1,-93,109,5,-29,-12,127,7,57,-68,54,36,39, 
  /* [36][0][][] */ 2,-83,127,-68,-62,14,-37,-9,23,33,-37,98,13,-109,-55,66, 
  /* [37][0][][] */ 64,-12,50,-15,102,-59,-23,18,-18,127,-58,-1,-41,-44,115,-8, 
  /* [38][0][][] */ 64,31,15,-122,31,-93,-127,70,-99,27,-109,-44,-48,-103,-111,48, 
  /* [39][0][][] */ -33,42,-47,-7,-86,-47,79,-16,-127,-9,2,49,25,25,33,14, 
  /* [40][0][][] */ 127,57,12,-78,-77,-6,16,-20,-44,-39,-36,-101,-8,31,7,42, 
  /* [41][0][][] */ 93,-112,-82,-30,-21,-9,-81,-10,65,-40,-11,-63,127,-99,78,-28, 
  /* [42][0][][] */ -14,-98,-39,127,21,-74,-106,38,35,-9,20,55,-94,37,-50,8, 
  /* [43][0][][] */ -105,-58,-42,-98,-36,5,-17,84,27,-127,-29,46,-29,-35,-39,78, 
  /* [44][0][][] */ -31,59,49,-77,-20,-27,47,89,100,-47,75,91,127,50,3,9, 
  /* [45][0][][] */ 13,46,-85,111,127,-64,-54,-35,86,-79,62,-41,-42,14,-79,49, 
  /* [46][0][][] */ -29,-44,29,-12,127,-43,50,15,7,109,-29,-119,13,48,-49,80, 
  /* [47][0][][] */ 81,-22,-19,-27,55,-24,-21,-68,20,127,-37,16,6,-98,-55,9, 
  /* [48][0][][] */ 12,25,-26,-127,-41,-45,118,-115,-11,-10,-30,57,30,98,2,42, 
  /* [49][0][][] */ 14,127,-29,7,34,-5,54,30,-22,46,19,-46,-21,85,103,-108, 
  /* [50][0][][] */ 16,35,-23,9,-127,9,-62,-43,43,62,25,34,-47,-40,-1,26, 
  /* [51][0][][] */ 127,-22,-41,-6,-58,91,-82,-53,53,-2,-43,52,-18,-56,14,32, 
  /* [52][0][][] */ -51,-55,23,76,-58,-112,-87,8,-25,-36,5,-80,36,-92,22,127, 
  /* [53][0][][] */ 15,117,47,-127,8,100,116,-2,-39,-57,-10,-59,79,-104,-22,65, 
  /* [54][0][][] */ 24,100,2,1,9,-71,-115,58,6,-33,-40,127,67,92,12,44, 
  /* [55][0][][] */ -17,9,65,37,38,-2,105,71,-56,15,4,-3,127,70,0,-16, 
  /* [56][0][][] */ 127,47,19,12,-72,99,-28,-108,-1,68,-99,-22,-35,84,7,36, 
  /* [57][0][][] */ -54,-56,-69,-2,-54,-83,48,-1,-127,-49,67,73,-6,46,-16,52, 
  /* [58][0][][] */ 35,-56,59,11,3,-66,7,-9,49,1,-127,-50,30,-48,-6,51, 
  /* [59][0][][] */ 66,1,-123,78,22,10,62,-7,-20,-52,36,-67,-127,-85,7,101, 
  /* [60][0][][] */ 10,46,-1,29,-24,-30,-25,11,-39,-96,63,100,-57,-127,-52,1, 
  /* [61][0][][] */ -47,-3,61,-64,-51,54,-19,127,-18,-107,55,74,63,17,8,104, 
  /* [62][0][][] */ 74,36,-2,-127,-7,-24,-2,-28,16,24,-52,47,18,-27,-90,-84, 
  /* [63][0][][] */ 3,-27,-1,-27,-36,-54,-57,8,-68,-1,-26,-11,127,15,47,-20, 
  /* [64][0][][] */ 11,-13,-3,74,-127,-48,-36,-72,44,94,31,1,16,-63,-42,96, 
  /* [65][0][][] */ -30,-1,-21,4,-64,76,14,-14,51,-122,91,-53,54,63,-127,44, 
  /* [66][0][][] */ -118,63,-96,-41,57,-16,-93,-34,-37,75,104,17,-127,-60,19,75, 
  /* [67][0][][] */ 5,-31,-127,-107,80,84,-4,-30,-24,-2,46,-20,42,49,33,46, 
  /* [68][0][][] */ 42,7,-15,-24,-52,45,1,53,-66,47,127,-2,-25,-25,-126,-11, 
  /* [69][0][][] */ 49,-107,47,-26,26,-91,-43,127,-3,41,83,83,-38,72,-40,6, 
  /* [70][0][][] */ 63,29,90,16,73,-17,127,-15,53,37,-83,-5,-38,23,-33,-2, 
  /* [71][0][][] */ 3,40,92,-75,-127,-68,35,23,-2,-5,38,-100,-64,11,-8,42, 
  /* [72][0][][] */ -65,-103,19,-96,78,-3,-7,48,-75,4,-114,-6,45,127,-44,107, 
  /* [73][0][][] */ 1,4,61,8,115,-91,-77,22,-60,89,-115,47,-112,-52,127,-36, 
  /* [74][0][][] */ -80,-24,-127,-48,84,-40,-69,41,-106,-14,-127,-14,-43,-44,-50,61, 
  /* [75][0][][] */ 66,-36,27,-21,33,16,-127,-6,-18,-97,57,16,-9,0,-14,2, 
  /* [76][0][][] */ -9,-47,-73,97,59,123,127,-65,113,-102,108,127,44,-122,-31,86, 
  /* [77][0][][] */ -23,-20,127,-29,14,-25,-19,-112,13,28,15,64,46,27,29,-3, 
  /* [78][0][][] */ -31,20,1,-56,17,-93,48,-24,36,0,1,-99,-82,-84,-127,-67, 
  /* [79][0][][] */ -61,-51,-44,5,127,44,5,9,47,46,-29,31,-27,-97,-84,-17, 
  /* [80][0][][] */ 2,-97,27,113,-52,-30,-125,61,-48,64,84,3,-52,15,13,127, 
  /* [81][0][][] */ 126,81,7,98,-24,2,46,127,40,17,124,40,105,3,73,7, 
  /* [82][0][][] */ -68,0,38,-9,6,-120,-127,-95,14,76,-55,-39,-30,91,-57,-26, 
  /* [83][0][][] */ 74,-24,72,-26,-27,-24,-127,6,-9,-93,-1,-38,-27,24,10,-17, 
  /* [84][0][][] */ 24,-110,-127,78,83,38,25,57,-68,-13,-115,-15,13,-68,-90,22, 
  /* [85][0][][] */ -11,84,76,-6,67,15,17,-127,99,-12,-12,-22,70,-52,28,-34, 
  /* [86][0][][] */ 111,-40,127,53,11,-16,56,22,-29,-37,-97,-32,21,11,-51,-4, 
  /* [87][0][][] */ -9,30,36,-88,44,-23,-15,-4,37,-13,67,-51,-60,-127,32,26, 
  /* [88][0][][] */ -65,-32,32,17,15,51,-60,-62,-2,11,-60,-127,-50,-32,-1,-10, 
  /* [89][0][][] */ -95,24,16,-79,20,22,-127,13,125,42,-73,-32,-1,-115,-24,-10, 
  /* [90][0][][] */ -24,-27,-33,-55,127,32,-65,49,34,39,36,-3,17,25,-61,-3, 
  /* [91][0][][] */ -25,-53,13,79,-29,-6,-15,83,-26,-68,33,-44,-26,59,26,127, 
  /* [92][0][][] */ -34,104,24,-28,-46,71,-71,52,-11,-4,82,-18,-38,127,56,40, 
  /* [93][0][][] */ -14,61,-47,-32,46,67,-53,19,70,50,90,42,-127,-1,-40,83, 
  /* [94][0][][] */ 6,73,85,-4,-127,-32,23,-23,37,-8,38,-28,-41,-16,28,-9, 
  /* [95][0][][] */ -22,50,47,-16,127,-2,-62,43,60,43,-82,84,32,28,120,-41, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0021012199576944113, 0.0022785705514252186, 0.0015683736419305205, 0.00097334734164178371, 0.0012466029729694128, 0.0014952961355447769, 0.0015434987144544721, 0.0022002239711582661, 0.0015504693146795034, 0.0029105136636644602, 0.0012197430478408933, 0.0021403012797236443, 0.0013046640669927001, 0.0007196932565420866, 0.0018422132125124335, 0.0014532048953697085, 0.0026889618020504713, 0.0025438002776354551, 0.0027178546879440546, 0.0011164160678163171, 0.0018676463514566422, 0.0019261684501543641, 0.0014402910601347685, 0.001978785265237093, 0.0022140436340123415, 0.0022154937032610178, 0.0019377630669623613, 0.0018176353769376874, 0.0014833839377388358, 0.0017796418396756053, 0.00097708043176680803, 0.0018919709837064147, 0.0018155380384996533, 0.0020110206678509712, 0.0019249540055170655, 0.0012848367914557457, 0.0019692096393555403, 0.001557529903948307, 0.0012012108927592635, 0.0015359302051365376, 0.0024469268973916769, 0.0017024759436026216, 0.0018904840108007193, 0.0013048704713582993, 0.0025195516645908356, 0.0020894436165690422, 0.0019208057783544064, 0.0020961626432836056, 0.0015844414010643959, 0.0015897734556347132, 0.0024534957483410835, 0.0015920087462291121, 0.001065512653440237, 0.0016537668416276574, 0.0017210561782121658, 0.0024511970113962889, 0.0012634940212592483, 0.0013913628645241261, 0.0022544062230736017, 0.0017570405034348369, 0.0018209595000371337, 0.0015599401667714119, 0.002535632811486721, 0.0018039847491309047, 0.001330071478150785, 0.0019758488051593304, 0.0016262603458017111, 0.0018189447000622749, 0.0016714901430532336, 0.0014500707620754838, 0.0013941263314336538, 0.002146243117749691, 0.0013658340321853757, 0.0017266671638935804, 0.00095219281502068043, 0.0015922317979857326, 0.001684896182268858, 0.002004250418394804, 0.0012553746346384287, 0.0015341364778578281, 0.00061016797553747892, 0.0013490986311808228, 0.0019578016363084316, 0.0033403921406716108, 0.0020074110943824053, 0.0013841213658452034, 0.0027602703776210546, 0.0013654838548973203, 0.0016918468754738569, 0.001184293651022017, 0.001662440481595695, 0.0019258874235674739, 0.0016173452604562044, 0.0017194349784404039, 0.0021697632037103176, 0.0016271729255095124, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 3928, 14369, -7947, -5120, 2529, -6017, -6381, 4583, 11905, -13785, 624, 5024, -14020, 13564, -7154, 22000, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 7.0924594183452427e-05, 4.9699796363711357e-05, 6.1014678067294881e-05, 5.1546365284593776e-05, 6.2632017943542451e-05, 4.9793721700552851e-05, 5.4636046115774661e-05, 7.3404691647738218e-05, 8.7530082964804024e-05, 7.1701899287290871e-05, 5.808703281218186e-05, 6.4191248384304345e-05, 5.9914786106674001e-05, 8.1330523244105279e-05, 7.199118408607319e-05, 5.9875746956095099e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -76,36,68,-20,-50,8,-46,22,-44,16,-11,-7,33,37,36,-36,17,5,74,28,26,-64,127,62,36,32,13,39,-14,-77,-84,17,-59,-66,32,5,25,34,3,5,-13,22,-51,8,-76,-14,-21,68,-2,11,-31,5,-10,-8,46,-48,-75,20,1,61,36,31,4,27,5,-23,-34,13,-37,-37,30,-24,14,-20,-59,-34,-25,30,-48,-14,-36,66,87,-61,11,65,17,55,-4,-12,-12,-41,-56,-18,-56,3, 
  /* [1][0][][] */ 32,70,6,-35,-88,-37,-5,32,-13,17,31,-53,-2,-35,-46,-29,-8,26,-87,42,11,-103,18,58,-14,-76,-10,-46,98,-127,98,-75,78,36,-44,80,34,71,-24,-47,44,40,4,-25,-3,53,-121,-81,-57,-45,-25,-28,48,7,-21,39,15,-3,-39,35,14,80,-6,-94,39,-16,-67,-33,28,6,-112,-33,-58,-27,23,-58,-7,30,24,-51,-25,-30,-105,-42,22,-45,-13,43,-98,-36,-72,48,51,67,-87,52, 
  /* [2][0][][] */ 80,6,25,7,16,-74,85,16,12,-11,-4,-6,-67,-56,-8,-23,-104,-64,-18,50,8,-59,-42,52,-17,-53,25,1,-13,42,-50,127,-46,101,-10,6,0,-18,-4,-24,-70,78,79,25,-64,21,-20,3,42,-6,-6,-40,34,-21,-6,72,33,6,62,23,2,37,-35,-13,86,1,-17,-24,22,49,-29,5,50,62,50,23,48,-67,59,59,76,-10,-45,41,-32,25,5,49,43,18,-30,12,-23,50,-32,35, 
  /* [3][0][][] */ 15,-14,8,-2,7,12,27,-50,-16,75,61,91,39,18,-74,37,1,-55,21,22,31,127,66,-29,5,45,-3,27,66,-11,48,-1,-53,19,-2,-46,47,68,55,-3,-98,-44,-25,40,-37,51,8,1,-2,-31,11,-8,47,-117,-35,-48,25,109,-12,-24,-28,1,-34,-7,5,61,-43,-8,-28,14,32,-65,-17,-29,62,-11,49,22,-57,-57,-10,15,-20,10,8,-48,56,-11,17,41,47,-38,27,47,-53,42, 
  /* [4][0][][] */ 20,-27,-50,32,48,19,-64,-30,-41,90,92,-28,-10,13,5,-56,14,-5,-32,34,4,-20,38,60,-47,-5,-127,-6,-54,-68,26,1,-41,-34,4,33,-11,35,15,43,-40,-67,24,-17,11,-4,-16,45,-39,57,1,4,60,-21,-99,13,38,-25,-3,-33,30,-7,30,6,-87,7,-27,30,-52,30,-40,58,34,-49,-29,-37,18,-65,7,24,-50,72,-69,4,-39,30,35,-57,45,12,49,42,-50,-35,47,19, 
  /* [5][0][][] */ -46,45,54,-14,31,10,70,-11,7,47,12,-4,49,-16,-26,-38,-26,-43,37,41,-83,-38,-47,65,-42,9,59,41,47,-45,-32,58,32,83,8,32,19,36,55,-31,-6,105,85,-5,-3,72,18,-3,18,28,4,39,0,-49,43,-66,54,-29,-32,-37,34,99,-38,-6,86,-11,-69,-73,-44,3,-38,-8,2,27,2,-40,33,-14,-50,-34,127,0,42,-68,-52,43,45,-2,-24,49,25,-28,-33,50,-11,74, 
  /* [6][0][][] */ 59,33,-86,10,-56,-114,122,127,-40,35,-13,88,-125,-90,42,71,42,-40,-4,31,15,-43,-59,-64,-79,56,88,38,53,53,73,-34,26,-10,31,-51,32,22,48,55,3,34,-27,-11,-20,-46,-97,19,46,-114,-30,68,3,3,21,-74,53,62,33,23,-86,74,-71,10,63,17,-11,35,54,49,-13,-42,-25,24,79,39,48,-9,24,-101,6,-40,-56,53,16,-78,54,8,-36,65,30,-4,-28,34,-51,122, 
  /* [7][0][][] */ 22,69,-33,-37,-2,-23,35,-18,-52,17,-48,-43,-20,7,9,-9,-66,-27,-16,53,-28,127,-7,32,-2,-5,17,37,14,-1,58,-11,69,58,-19,-9,-8,-30,-21,54,-34,-19,-14,-56,25,-57,88,-4,21,-66,-46,-29,-15,9,-40,-3,2,-11,-63,-9,-9,79,-8,-35,-66,-40,-27,31,-34,-19,-83,20,-6,58,-22,21,-33,22,37,-33,-36,-51,40,-47,37,-25,-15,-1,-3,51,-67,70,78,-49,-29,12, 
  /* [8][0][][] */ -12,96,-34,38,-21,-6,-73,44,-89,-27,5,19,-40,46,36,84,10,-45,7,17,51,-27,1,-19,-52,75,4,13,3,-1,-49,-13,-55,-70,-16,-66,-20,27,64,1,-18,-24,34,8,-26,-24,-9,-10,-14,-16,26,79,-26,-15,-51,110,-25,40,9,-32,-44,-4,13,64,-24,-42,-17,-19,-7,20,17,19,-8,-35,-127,-24,-38,29,-78,-68,-25,22,-31,-24,-8,-1,17,30,16,70,-67,-34,-109,-115,29,-39, 
  /* [9][0][][] */ 0,27,-69,46,-19,-26,90,82,6,56,-11,109,-29,-13,16,122,7,0,69,9,35,-14,46,-77,-42,16,39,4,61,-6,37,65,-46,-18,10,-121,40,6,2,-42,-15,59,66,2,-22,28,-8,6,48,84,39,7,-65,-89,28,4,10,21,87,-6,-77,79,-48,-7,127,11,-21,2,-44,43,54,8,9,73,-13,-11,-16,36,-61,-34,57,-17,72,-2,42,9,-21,-19,-48,37,-4,-26,37,48,-55,-5, 
  /* [10][0][][] */ 74,-19,-32,9,-15,-21,78,-18,-18,-22,-31,-18,-100,14,4,-35,-42,-34,25,6,16,50,26,26,-68,51,28,17,-86,-78,-10,-8,38,-13,27,-14,61,-96,49,127,-2,-70,-11,-11,-38,-91,10,53,26,60,-41,-22,0,15,-19,34,5,-66,56,11,6,42,-68,-55,-35,-82,26,53,24,-38,-18,11,85,19,29,-70,42,-46,68,3,-42,16,26,25,-33,-37,-4,43,-40,-23,22,43,33,39,-20,-21, 
  /* [11][0][][] */ -24,-76,47,-70,20,13,-27,-67,34,-38,21,-24,-7,-5,-19,-7,-85,-11,44,7,-77,26,-58,-58,26,29,-30,64,9,-69,50,-21,28,32,12,-32,-63,21,-100,12,-39,23,-53,60,10,10,9,-11,40,-32,-30,-39,27,4,29,-33,-23,-61,29,-51,-34,-34,-43,-127,-9,-60,64,66,93,13,79,-26,-22,-13,84,-51,101,37,40,68,18,-13,-26,81,100,0,2,-9,-68,-50,-9,19,57,31,45,35, 
  /* [12][0][][] */ 22,-17,-16,-24,20,102,-24,38,41,41,-7,63,65,8,35,20,-47,54,6,52,127,-2,71,-65,51,2,-77,-65,13,76,-3,13,48,9,-6,-11,27,-1,-44,-22,45,-6,19,44,-2,21,17,-18,-73,28,-17,9,-10,11,37,13,-23,46,-1,81,5,-90,-3,-49,46,95,-6,-23,-6,-19,40,12,-23,1,-1,48,-20,55,-90,17,-33,22,91,4,-31,70,-29,-80,44,-10,-89,59,87,-2,-26,-89, 
  /* [13][0][][] */ -11,35,-20,-26,-7,-31,9,-58,8,-51,-45,-83,57,-101,-35,-68,-36,-27,-77,-22,-110,-3,12,93,-9,-14,96,20,-11,-60,59,35,32,38,-127,96,-31,-63,3,-36,112,-12,-10,11,16,-113,88,-21,47,-26,-38,32,51,10,-32,74,47,-66,-46,-26,53,26,-18,-105,-41,6,-28,65,-60,-49,-93,-5,-83,32,-36,-92,-91,-4,62,118,-26,29,40,-83,50,21,20,-27,-20,-27,1,48,-29,-7,-13,-17, 
  /* [14][0][][] */ 2,42,-50,-28,75,82,-52,19,42,-22,70,15,27,-26,-31,-53,-73,9,25,127,24,-37,11,21,1,50,-11,72,34,7,-36,27,32,-19,-20,8,3,62,69,-7,67,24,50,11,-7,-24,31,-31,30,2,5,-3,24,10,-8,29,29,64,-59,13,-34,-49,-36,-59,49,-12,-46,-41,-53,64,1,38,14,-12,-25,-30,44,7,-62,-38,36,18,6,-9,0,49,-7,0,-20,68,46,-7,-18,-16,-51,-48, 
  /* [15][0][][] */ -75,-44,25,-52,17,-44,-38,-112,-20,3,-16,49,-29,-19,26,86,-92,-30,28,-81,4,0,-28,-81,38,-21,36,-54,-110,-125,-43,20,-21,72,65,-104,-19,-56,-2,4,-38,-30,10,-34,3,-24,89,107,-59,-18,16,-46,-22,62,-13,-64,-103,-39,84,-21,-11,-5,-97,8,-127,-41,18,18,46,-90,59,-49,38,-29,-41,-51,3,6,73,28,-29,59,41,21,-7,-55,-120,6,-16,-66,-51,52,76,-50,-7,59, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0030142951291054487, 0.0021122412290424109, 0.0025931238196790218, 0.0021907205227762461, 0.0026618607807904482, 0.0021162331104278564, 0.0023220318835228682, 0.0031196991913020611, 0.0037200283259153366, 0.0030473307706415653, 0.0024686988908797503, 0.0027281278744339943, 0.0025463784113526344, 0.0034565471578389406, 0.0030596251599490643, 0.002544719260185957, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { -1012, -4646, -371, -2924, 3682, 5018, -4745, 1494, -174, -5314, 11122, -2027, -1498, 9542, 9747, -5832, 7817, -3014, -3333, 822, -1359, -790, -4146, -3030, -94, -4438, 5690, -5152, -1456, -6645, 5244, -627, 2492, 2678, -4505, 68, 1269, -1763, -1053, 5994, 2904, 1100, -4197, -2612, 13726, 25839, -2456, 11792, -2213, 8944, 6836, -2213, 233, 1295, -1110, 6964, -5664, 2457, 14233, 9640, 13066, 12182, 7616, -6684, -347, -478, -2867, 8546, 929, -1965, 10692, 5576, 13475, 1956, -2569, 10172, -1123, 674, 3557, -2378, -2909, 11403, 4822, 7896, 14833, -3253, -1534, -1970, -3955, -2648, 10750, 92, -924, -123, -4437, -3546, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00026204698951914907, 0.00016307723126374185, 0.00010762181045720354, 0.00020155661331955343, 0.00023907161084935069, 0.00035551289329305291, 0.00032610443304292858, 0.00034608735586516559, 0.00025800990988500416, 0.00018051864753942937, 8.1516358477529138e-05, 0.00026848053676076233, 0.00034949742257595062, 0.0001175094221252948, 0.0001013173459796235, 9.8478136351332068e-05, 0.00015151333354879171, 0.00021631625713780522, 0.00014822764205746353, 7.1801812737248838e-05, 0.00020579811825882643, 0.00049964152276515961, 0.00019151958986185491, 0.00015926553169265389, 0.00057326891692355275, 0.00015409395564347506, 0.00028354243841022253, 8.467274165013805e-05, 0.00018984975758939981, 8.5349958681035787e-05, 0.00028584184474311769, 0.00020561792189255357, 0.000229032346396707, 0.00019085132225882262, 0.00024274307361338288, 0.00024632786517031491, 0.00024105249030981213, 0.00027599625173024833, 0.00044420326594263315, 0.00018542472389526665, 0.00014429501607082784, 0.00023412104928866029, 0.00021489687787834555, 0.00021994207054376602, 8.9778317487798631e-05, 4.7621284466003999e-05, 0.00025146483676508069, 0.00012542087642941624, 0.00024142886104527861, 0.0001395958533976227, 9.027324995258823e-05, 0.00010231910709990188, 0.00044372491538524628, 0.00022921455092728138, 0.00029387345421127975, 0.00022222130792215466, 0.00014774560986552387, 0.00024386376026086509, 0.00011515610822243616, 8.0568279372528195e-05, 6.815385859226808e-05, 0.00012855548993684351, 0.00012603837240021676, 0.00010603899863781407, 0.0002062407584162429, 0.00027697207406163216, 0.00021870456112083048, 0.00017869571456685662, 0.00022827212524134666, 0.0001342439791187644, 0.00014989986084401608, 0.00012311013415455818, 5.3081283112987876e-05, 0.00031285942532122135, 0.00036512746009975672, 8.6887179350014776e-05, 0.00013959722127765417, 0.00018856181122828275, 0.00028708443278446794, 0.00024407546152360737, 0.0003277004580013454, 0.00012606864038389176, 0.00020668304932769388, 0.00014084797294344753, 5.6708922784309834e-05, 0.00021353592455852777, 0.00016686665185261518, 0.00030344194965437055, 0.00026502707623876631, 0.00035241272416897118, 8.6130763520486653e-05, 0.00038808659883216023, 0.00031318172113969922, 0.00034346673055551946, 8.2060258137062192e-05, 0.00029468454886227846, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 6,127,-34,-14,-56,-23,48,21,88,-49,-115,53,-10,-51,46,-90,-93,23,0,63,31,47,112,110,34,-7,-55,-24,-5,97,3,-18,24,-3,-11,42,-14,56,11,-55,42,-52,9,-18,-127,-63,18,18,3,-10,-92,-23,-15,31,-26,-3,-44,-96,-90,-127,-119,52,-51,-36,-34,58,64,-44,-52,55,-6,-25,-101,-14,51,55,-16,5,-81,40,18,-127,53,-95,-88,-53,-42,-14,-90,9,-100,52,49,-12,83,-15, -53,-54,-50,108,-33,62,-6,-21,48,35,-127,54,-23,-106,-68,118,-127,95,73,127,127,-6,111,127,44,8,-7,11,4,127,-21,-127,121,72,21,46,52,91,-17,-127,127,-17,127,72,-101,-123,127,-21,-13,-84,-97,-64,-21,127,-8,-127,44,10,-127,-127,-24,-104,-32,87,-25,70,127,-42,-2,127,82,-24,-127,21,-13,-60,-2,-35,38,127,6,-100,122,-126,-112,-16,127,45,108,101,-127,-36,127,-30,127,15, 16,-46,-8,-25,-28,-32,-3,15,7,72,-74,7,1,32,63,-57,-9,3,12,80,28,37,80,75,65,-32,-16,51,5,8,-31,-56,-43,-86,-13,75,16,0,30,93,2,33,-3,79,-12,-51,-11,27,29,-26,-11,42,-40,-24,16,26,81,-113,-84,-73,-54,46,-97,-9,62,-12,-31,-22,-56,-29,-18,-10,0,-50,-3,49,-9,26,-43,32,15,-71,13,-21,-73,4,-29,-27,-56,-34,-27,39,-8,46,68,-3, 
  /* [0][1][][] */ 103,34,17,127,-13,-47,127,21,-25,-94,-91,127,20,-127,-115,44,-35,-43,65,5,-83,7,-82,-32,11,127,-127,127,-89,76,102,107,71,38,20,127,-127,43,-5,-55,42,-127,64,11,-84,-127,26,-127,-117,-35,-127,4,127,-94,72,21,-110,-9,-42,13,-127,-98,-27,8,-93,-6,48,-127,-57,49,-80,-127,-121,43,127,-117,70,55,-46,-16,127,-70,-55,77,-76,15,-27,43,-34,10,-46,53,6,-82,113,-25, -127,47,-86,92,-101,-127,-82,-127,48,14,-85,-2,-65,-102,-73,127,-71,-127,127,126,27,-127,-127,115,-127,119,12,83,-64,-83,-127,69,-127,53,127,-21,3,127,127,-101,-61,24,66,-8,-2,-84,-39,-98,0,-127,-62,127,11,33,57,-46,33,15,120,-86,-117,-91,-127,127,6,-127,48,95,24,61,-127,-84,-61,34,-83,-127,127,93,127,-62,-57,-40,-127,45,-92,-65,109,127,127,127,-89,-127,-91,-52,69,127, 40,41,50,26,-10,-41,31,7,-53,127,-90,29,10,-4,-102,42,43,-14,-2,37,-116,14,-53,-49,-10,44,86,25,127,107,-9,-100,7,-127,3,118,-93,55,-18,5,-22,93,37,127,-31,-127,22,-29,127,-93,-87,42,2,-72,-127,54,127,-17,-123,126,-79,-28,-18,-12,127,-32,-28,-62,-86,24,-65,-60,-89,-127,4,-40,18,-29,-58,-32,-47,-31,-45,127,-127,25,-29,-1,8,-6,-15,60,-18,127,65,-2, 
  /* [0][2][][] */ 61,-118,11,-35,-4,12,54,53,-48,-23,-23,-52,27,38,0,60,12,65,-54,1,-32,46,41,2,44,38,-32,43,-29,-17,-20,53,4,-28,-16,12,2,79,2,-5,-22,13,29,-10,-46,-77,1,-67,1,88,4,10,-26,6,-17,-47,2,-17,35,57,-116,-20,22,13,-16,47,-11,-60,18,14,-30,43,-6,7,28,-23,-24,-55,-21,22,24,54,-37,-88,-50,50,-67,-28,-100,2,29,50,12,1,21,-12, -19,40,127,-33,127,58,-3,15,-127,21,-49,-77,127,-6,-127,63,34,95,-61,-61,33,13,28,20,62,-90,-30,62,14,58,-39,46,-57,7,21,-4,25,81,0,-46,-42,-3,-111,-21,29,-61,-16,-75,-2,-68,-5,111,47,-55,-29,-80,21,127,-19,-46,55,-127,60,118,-14,35,-13,-30,127,-7,-31,68,-80,1,-6,-86,17,-127,-56,-29,7,-25,-55,-122,-11,127,8,-11,108,-16,62,44,-29,-26,22,6, 18,102,61,-51,-4,33,13,41,-8,70,70,-2,22,13,-19,49,13,74,-80,74,0,34,27,9,4,37,-31,45,40,-2,-46,-78,-29,-28,-6,-9,19,16,-10,-7,-29,-7,31,17,-45,-88,3,-58,49,-3,76,-18,-47,-4,35,22,44,9,10,126,-94,3,6,-45,39,21,-20,17,9,8,-23,47,9,-22,-2,-47,14,-56,24,-5,9,-38,-41,-40,-7,76,-61,-14,-27,18,16,35,10,-16,22,-6, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.011136996559798717, 0.0069307824596762657, 0.0045739267952740192, 0.0085661560297012329, 0.010160543024539948, 0.015109297819435596, 0.013859438709914684, 0.014708711765706539, 0.010965420864522457, 0.0076720421202480793, 0.0034644452389329672, 0.011410422623157501, 0.014853640459477901, 0.0049941502511501312, 0.0043059871532022953, 0.0041853208094835281, 0.0064393165521323681, 0.0091934408992528915, 0.0062996745109558105, 0.0030515769030898809, 0.0087464200332760811, 0.021234763786196709, 0.0081395823508501053, 0.0067687849514186382, 0.0243639275431633, 0.0065489932894706726, 0.012050553224980831, 0.0035985915455967188, 0.0080686146393418312, 0.0036273731384426355, 0.012148278765380383, 0.008738761767745018, 0.0097338743507862091, 0.0081111807376146317, 0.010316580533981323, 0.01046893373131752, 0.010244730859994888, 0.011729840189218521, 0.018878638744354248, 0.0078805508092045784, 0.0061325379647314548, 0.0099501442164182663, 0.0091331172734498978, 0.0093475375324487686, 0.0038155785296112299, 0.0020239045843482018, 0.010687255300581455, 0.0053303870372474194, 0.010260726325213909, 0.0059328237548470497, 0.0038366131484508514, 0.0043485620990395546, 0.018858307972550392, 0.0097416182979941368, 0.012489621527493, 0.0094444053247570992, 0.0062791882082819939, 0.010364209301769733, 0.0048941345885396004, 0.0034241518005728722, 0.0028965389356017113, 0.0054636080749332905, 0.0053566307760775089, 0.0045066573657095432, 0.0087652318179607391, 0.011771312914788723, 0.0092949438840150833, 0.0075945677235722542, 0.0097015649080276489, 0.0057053691707551479, 0.0063707437366247177, 0.0052321804687380791, 0.0022559545468539, 0.013296524994075298, 0.015517916530370712, 0.0036927051842212677, 0.0059328819625079632, 0.0080138770863413811, 0.012201087549328804, 0.010373206809163094, 0.013927268795669079, 0.0053579169325530529, 0.008784029632806778, 0.0059860385954380035, 0.0024101291783154011, 0.0090752765536308289, 0.0070918328128755093, 0.012896282598376274, 0.011263650842010975, 0.014977539889514446, 0.0036605573259294033, 0.016493679955601692, 0.013310222886502743, 0.014597335830330849, 0.003487560898065567, 0.012524092569947243, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 5768, 1297, 448, -1164, 9218, 10841, 5763, 3496, -1041, 7835, 2237, -3100, 4304, 4268, 189, -130, 3587, 8504, -137, -122, 4844, 9523, 9025, -1354, -2888, -1160, 10290, 313, 1550, 2416, 11729, -1411, 9157, 2090, 7566, -2781, 1257, -4567, 69, 1767, 2925, 1955, 1999, -1172, 806, 1832, 2262, 3659, 4800, 3779, 5672, 4401, -3758, 2092, 684, 1586, 2189, 5089, 6916, 1389, -1695, 5442, 4488, 5027, 2876, 6898, -4765, 4066, 6111, -405, 9299, 1232, 3371, 6628, 4951, 1986, 375, 2976, 3449, 2054, 2907, 3093, 9199, 1254, 2720, 3941, 888, -1032, 10322, -1334, 1120, -2181, 8302, 2940, -730, -633, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00011701649054884911, 0.0001942169910762459, 0.00015029356291051954, 0.00022138333588372916, 8.8164502813015133e-05, 8.0180878285318613e-05, 0.00012697375495918095, 0.0001215096126543358, 0.00014765076048206538, 9.4100447313394397e-05, 0.00013523129746317863, 0.00011977561371168122, 0.00011209899093955755, 0.00012954638805240393, 0.00017739349277690053, 0.00015827051538508385, 0.00018715202168095857, 9.2141388449817896e-05, 0.00011576918768696487, 0.00018168400856666267, 0.00012262935342732817, 7.8212397056631744e-05, 8.9806853793561459e-05, 0.00019182248797733337, 0.00017178524285554886, 0.0001444760273443535, 9.2368100013118237e-05, 0.00012451723159756511, 0.0001697783445706591, 9.9576747743412852e-05, 7.7506498200818896e-05, 0.00017159871640615165, 8.6224965343717486e-05, 0.00024085992481559515, 9.4983050075825304e-05, 0.00018599031318444759, 0.00012946955393999815, 0.00013354004477150738, 0.00015772502229083329, 0.00019688747124746442, 0.00014314211148303002, 0.0001381493202643469, 0.00020549067994579673, 0.0001443689689040184, 0.00021701706282328814, 0.00016528245760127902, 0.0002004643902182579, 0.00017075240612030029, 0.00012314258492551744, 0.00015363626880571246, 0.00012135337601648644, 0.00010445875523146242, 0.00010849260434042662, 0.00014730502152815461, 0.00019599799998104572, 0.00021764221310149878, 0.00014875941269565374, 8.7863278167787939e-05, 0.00010852226841961965, 0.00017633898823987693, 0.0001822003978304565, 0.00012218803749419749, 0.00013149136793799698, 0.00013129947183188051, 0.00015957884897943586, 0.00011705730139510706, 0.00011042039113817737, 0.000126986502436921, 0.00011673438712023199, 0.00024238324840553105, 8.3137965702917427e-05, 0.00013233865320216864, 0.00011635271221166477, 8.5029656474944204e-05, 9.7690361144486815e-05, 0.0001001360360532999, 0.00017878023209050298, 0.00013956298062112182, 0.00012326402065809816, 0.00020340367336757481, 0.00015308828733395785, 0.00012286311539355665, 8.2355101767461747e-05, 0.00012464170868042856, 0.00014704310160595924, 0.00014702939370181412, 0.00013880922051612288, 0.00027593757840804756, 8.5197811131365597e-05, 0.00012659314961638302, 0.00019026802328880876, 0.00016070551646407694, 8.9534813014324754e-05, 0.0001300948642892763, 0.00016581101226620376, 0.00015261388034559786, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -26,68,23,-51,-21,-65,-23,-72,51,-21,33,-36,54,-81,24,-127, 
  /* [1][0][][] */ -52,61,-108,-90,-66,15,-36,59,-20,-8,43,-49,39,127,11,-3, 
  /* [2][0][][] */ -60,-51,-127,17,20,-87,35,-37,-46,115,83,44,70,50,-98,109, 
  /* [3][0][][] */ -43,-49,-5,-50,-93,22,-37,-127,8,30,37,-81,-46,-46,-95,-29, 
  /* [4][0][][] */ 93,-13,-5,36,-83,-7,-127,58,69,75,32,88,23,-13,-67,-85, 
  /* [5][0][][] */ -60,58,-86,-40,61,-44,-13,-43,103,-10,8,-25,29,-48,-127,-87, 
  /* [6][0][][] */ -38,-35,10,22,-108,55,77,-41,-15,-32,127,-40,-21,-12,-72,9, 
  /* [7][0][][] */ -11,127,45,-36,37,105,20,-28,0,92,-59,-41,46,27,85,91, 
  /* [8][0][][] */ -55,-9,62,26,28,20,102,102,-76,-5,-62,-91,76,127,-42,-38, 
  /* [9][0][][] */ 66,65,66,26,-103,-83,-50,-121,86,46,58,-20,-10,-127,10,-14, 
  /* [10][0][][] */ -44,-111,-5,-54,-127,61,33,36,-37,-78,31,44,-45,52,-95,53, 
  /* [11][0][][] */ 127,-87,-30,73,-43,-68,25,24,125,74,-40,41,-10,-100,-57,105, 
  /* [12][0][][] */ -34,-51,91,-53,84,-51,-19,22,72,-25,39,59,-29,31,-127,10, 
  /* [13][0][][] */ -12,-30,-5,22,22,31,127,47,-100,17,37,7,7,102,96,-68, 
  /* [14][0][][] */ 127,-42,107,-29,34,29,101,23,75,73,27,16,83,-59,56,-34, 
  /* [15][0][][] */ -15,90,-11,-9,51,127,-96,108,-96,-54,1,10,-59,89,-54,-49, 
  /* [16][0][][] */ -49,39,100,-19,31,51,-9,3,-19,-1,1,42,53,11,68,127, 
  /* [17][0][][] */ 10,89,74,-88,55,-21,-2,-110,-32,127,-52,69,-28,7,89,-76, 
  /* [18][0][][] */ -107,2,-91,-68,110,106,-44,-83,66,112,111,82,-44,127,-54,-2, 
  /* [19][0][][] */ 23,115,77,55,31,-37,5,-8,-9,127,20,83,73,71,-23,46, 
  /* [20][0][][] */ 119,-64,-31,61,-57,22,-90,95,-4,-82,-98,-20,127,-13,-10,0, 
  /* [21][0][][] */ -127,-118,-16,46,-33,4,-118,62,-5,-4,82,42,-39,3,-85,-41, 
  /* [22][0][][] */ 23,17,-77,-60,127,-35,-33,26,96,74,30,55,1,26,-2,25, 
  /* [23][0][][] */ -54,25,-9,34,-6,43,75,47,-17,127,-26,-12,-1,27,-17,-16, 
  /* [24][0][][] */ 25,-85,38,11,127,7,42,-28,22,-3,34,39,-83,23,-16,18, 
  /* [25][0][][] */ 126,-27,100,-10,-6,-43,-50,79,78,23,-92,0,127,-28,97,12, 
  /* [26][0][][] */ 63,43,72,61,63,6,-76,0,10,62,7,127,44,-47,-11,-60, 
  /* [27][0][][] */ -32,37,-74,13,-41,113,9,-80,-8,-58,98,47,59,8,127,72, 
  /* [28][0][][] */ -127,61,-86,-94,1,-68,46,-57,-115,95,-37,2,-53,82,27,89, 
  /* [29][0][][] */ 89,88,-106,43,57,114,-68,-22,-1,34,-4,91,-127,86,-29,57, 
  /* [30][0][][] */ -45,99,-107,-63,72,-8,-13,32,-94,5,-41,45,-13,100,-29,127, 
  /* [31][0][][] */ 13,-103,98,41,94,-74,-34,16,-10,26,-3,-56,-53,40,50,127, 
  /* [32][0][][] */ -82,50,-4,70,-107,65,-2,77,25,-127,44,-84,87,70,75,53, 
  /* [33][0][][] */ -87,-13,55,89,-12,-5,-25,15,-36,-23,-2,-46,17,-4,8,127, 
  /* [34][0][][] */ 12,22,-100,-73,71,11,-7,94,3,-35,-6,-31,-98,-25,-24,127, 
  /* [35][0][][] */ 60,-15,32,3,4,2,-93,-16,-17,-127,-49,24,-27,-9,43,-12, 
  /* [36][0][][] */ -24,-12,-127,17,39,102,-39,68,-43,-1,62,61,-4,3,-110,58, 
  /* [37][0][][] */ 68,48,39,-83,65,-127,69,-7,-86,60,-97,-32,23,20,97,39, 
  /* [38][0][][] */ -49,112,13,-53,43,14,52,-63,10,29,-127,26,-21,-69,-82,3, 
  /* [39][0][][] */ 38,15,-72,-127,3,7,-22,-56,-2,21,-6,-9,82,28,-94,-89, 
  /* [40][0][][] */ -47,24,-81,-90,-60,-12,-29,-124,-31,-46,8,-10,57,127,40,83, 
  /* [41][0][][] */ 3,-86,-8,68,39,-90,-127,-45,-10,-79,79,-57,-97,-49,-47,78, 
  /* [42][0][][] */ -27,37,-48,-127,35,12,21,1,57,-15,-27,4,50,-39,-39,32, 
  /* [43][0][][] */ 20,68,2,7,122,43,35,25,-16,56,-10,-123,-127,-57,-9,-12, 
  /* [44][0][][] */ 79,6,25,17,-41,-15,24,21,44,-10,17,-10,127,-11,-25,-8, 
  /* [45][0][][] */ 1,-72,-70,55,-67,-82,28,53,53,20,23,14,-55,127,77,-20, 
  /* [46][0][][] */ -33,-82,71,69,3,-28,-45,7,34,-4,30,-21,-12,56,84,127, 
  /* [47][0][][] */ -26,-30,30,44,-11,-12,59,1,0,-32,-127,-44,33,-29,-33,13, 
  /* [48][0][][] */ -90,127,-18,-81,-7,119,13,-114,1,-52,98,-104,40,-100,-60,18, 
  /* [49][0][][] */ -40,-14,50,-17,17,-9,93,127,-26,-45,-30,36,-52,44,-67,7, 
  /* [50][0][][] */ 21,-8,-93,55,36,-127,-45,26,-79,21,-8,-8,-14,-54,-123,-7, 
  /* [51][0][][] */ -45,35,-48,118,-45,42,-50,-86,-96,-73,-12,-8,-3,66,6,127, 
  /* [52][0][][] */ -127,23,9,-20,28,53,77,-8,30,-64,-63,-42,-91,-74,-110,-19, 
  /* [53][0][][] */ -72,-86,-25,-87,-24,-24,-9,30,3,-65,-21,22,-50,49,96,127, 
  /* [54][0][][] */ 38,-45,-11,5,-54,60,73,-21,3,-93,53,4,2,-48,-127,34, 
  /* [55][0][][] */ 2,-6,-41,14,41,-10,76,59,-38,-31,-127,-52,63,-32,-6,21, 
  /* [56][0][][] */ 74,-5,-18,-41,-127,18,-64,-15,-22,-26,-8,19,96,-13,54,31, 
  /* [57][0][][] */ -88,-27,34,-42,127,18,54,97,-29,55,66,-6,-119,38,-123,15, 
  /* [58][0][][] */ 46,22,13,-54,25,-9,-35,-83,63,-127,-87,-10,-68,-68,-10,52, 
  /* [59][0][][] */ -51,-4,24,-13,-12,55,-64,-44,57,127,-89,22,-58,-11,-6,-8, 
  /* [60][0][][] */ 41,-30,-24,4,-127,-22,24,-4,9,38,-25,60,25,-11,36,18, 
  /* [61][0][][] */ -4,11,-51,12,-30,-26,-127,-64,-33,6,25,123,37,-47,77,47, 
  /* [62][0][][] */ 72,4,3,-28,-39,75,53,94,-51,127,-8,58,48,54,67,70, 
  /* [63][0][][] */ 19,-127,-25,-12,-46,12,24,-34,-22,-29,-16,8,-51,113,96,10, 
  /* [64][0][][] */ -6,20,-82,-74,75,27,-8,-44,-29,-127,66,-7,64,-16,-47,125, 
  /* [65][0][][] */ -20,5,68,41,66,-30,24,55,-59,0,-127,-59,16,110,-48,-2, 
  /* [66][0][][] */ -53,-127,-7,-54,-43,-81,18,-5,-21,-53,37,93,-84,-15,-66,71, 
  /* [67][0][][] */ -4,-54,-61,-26,-81,127,1,-81,-80,-29,-60,-104,12,9,-4,8, 
  /* [68][0][][] */ 89,19,10,-12,-43,13,-60,-14,-63,-127,4,2,33,-49,26,-71, 
  /* [69][0][][] */ 29,1,6,-25,3,-12,-40,52,-10,127,-9,23,23,65,50,-21, 
  /* [70][0][][] */ 17,-30,-50,90,-98,25,-14,-72,127,87,50,67,48,-90,-38,35, 
  /* [71][0][][] */ 107,-48,71,60,-67,-18,3,-39,127,22,-62,53,104,-87,41,-9, 
  /* [72][0][][] */ -25,-20,-17,53,34,6,-127,118,46,-19,72,20,-63,-27,-38,105, 
  /* [73][0][][] */ 37,-16,50,-127,53,-83,-59,95,17,122,-22,18,19,-92,3,-6, 
  /* [74][0][][] */ 127,52,46,8,-108,-28,74,-46,-64,-71,-5,-81,88,-102,3,-26, 
  /* [75][0][][] */ 54,106,-81,48,47,47,-47,-16,-32,-31,66,109,-127,95,50,96, 
  /* [76][0][][] */ -54,-24,-27,-51,-58,12,94,5,-75,8,114,60,-40,-127,-23,78, 
  /* [77][0][][] */ -33,127,-67,6,-60,-50,10,92,10,-96,43,43,-78,74,-38,54, 
  /* [78][0][][] */ 127,43,-82,6,-56,22,-97,5,0,-2,-66,16,25,-84,43,94, 
  /* [79][0][][] */ -67,-46,127,36,-44,-78,-25,-40,-39,-6,45,14,-61,80,-19,103, 
  /* [80][0][][] */ 29,127,25,-100,65,56,116,28,-7,85,-79,28,43,-12,41,-2, 
  /* [81][0][][] */ 48,-50,-23,-127,91,71,5,121,98,31,38,-47,-1,26,-83,-35, 
  /* [82][0][][] */ 73,44,113,-8,107,-127,37,22,-18,116,-55,0,24,-23,30,-88, 
  /* [83][0][][] */ -13,65,7,29,117,95,104,127,8,17,-10,-48,-120,91,-93,-90, 
  /* [84][0][][] */ -43,-114,-11,76,27,-84,-64,49,-55,84,-43,13,-127,44,-9,-28, 
  /* [85][0][][] */ -105,15,-40,-3,22,-35,-80,-39,5,59,2,-43,-127,-51,-100,51, 
  /* [86][0][][] */ -9,74,74,91,41,-24,68,5,22,42,-48,-57,48,84,-127,-46, 
  /* [87][0][][] */ -25,70,127,-26,-100,-36,26,26,46,-27,26,40,-35,13,-10,8, 
  /* [88][0][][] */ 1,-46,-74,1,5,65,-38,-27,40,-107,-84,-82,127,-19,33,6, 
  /* [89][0][][] */ 57,14,26,-121,-8,-99,-77,56,127,-4,18,-121,16,-26,48,-82, 
  /* [90][0][][] */ -22,42,19,29,-23,26,20,118,-12,-67,9,127,33,18,-40,78, 
  /* [91][0][][] */ -98,-25,29,95,82,-4,-33,-107,-57,22,16,48,-127,-105,-55,16, 
  /* [92][0][][] */ -67,40,32,0,-123,-37,-56,54,-73,84,127,79,-57,-15,53,43, 
  /* [93][0][][] */ 114,42,99,15,-127,-126,6,2,9,-49,-39,-40,17,-66,-17,-28, 
  /* [94][0][][] */ -8,-127,28,-80,30,-3,-34,-8,75,-30,-12,60,-12,38,-26,28, 
  /* [95][0][][] */ -8,-24,-10,-33,100,127,-2,15,89,55,-82,36,-15,114,-50,4, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0016865428769960999, 0.0027992231771349907, 0.0021661608479917049, 0.0031907681841403246, 0.0012707030400633812, 0.0011556361569091678, 0.0018300554947927594, 0.0017513015773147345, 0.0021280704531818628, 0.0013562570093199611, 0.0019490703707560897, 0.0017263097688555717, 0.0016156675992533565, 0.0018671345897018909, 0.0025567484553903341, 0.0022811314556747675, 0.0026973967906087637, 0.0013280214043334126, 0.0016685656737536192, 0.0026185871101915836, 0.0017674403497949243, 0.0011272646952420473, 0.0012943740002810955, 0.0027647116221487522, 0.0024759175721555948, 0.0020823134109377861, 0.0013312889495864511, 0.0017946499865502119, 0.0024469923228025436, 0.0014351862482726574, 0.0011170906946063042, 0.0024732290767133236, 0.0012427488109096885, 0.0034714816138148308, 0.0013689778279513121, 0.002680653240531683, 0.0018660272471606731, 0.0019246946321800351, 0.0022732694633305073, 0.0028377124108374119, 0.0020630878861993551, 0.0019911273848265409, 0.0029617093969136477, 0.0020807704422622919, 0.0031278375536203384, 0.0023821936920285225, 0.002889266237616539, 0.002461031312122941, 0.0017748374957591295, 0.0022143388632684946, 0.0017490497557446361, 0.0015055498806759715, 0.0015636892057955265, 0.0021230874117463827, 0.0028248927555978298, 0.0031368478666990995, 0.0021440493874251842, 0.0012663615634664893, 0.0015641167992725968, 0.0025415499694645405, 0.0026260297745466232, 0.001761079765856266, 0.001895167282782495, 0.0018924014875665307, 0.0022999884095042944, 0.0016871310072019696, 0.0015914741670712829, 0.0018302391981706023, 0.0016824769554659724, 0.0034934370778501034, 0.0011982562718912959, 0.0019073791336268187, 0.0016769758658483624, 0.0012255209730938077, 0.0014079979155212641, 0.0014432471944019198, 0.0025767353363335133, 0.0020115023944526911, 0.0017765876837074757, 0.0029316295403987169, 0.002206440782174468, 0.0017708094092085958, 0.0011869729496538639, 0.0017964440630748868, 0.0021193122956901789, 0.0021191148553043604, 0.0020006385166198015, 0.0039770510047674179, 0.0012279445072636008, 0.0018245698884129524, 0.002742307260632515, 0.0023162269499152899, 0.0012904531322419643, 0.0018750396557152271, 0.0023898116778582335, 0.0021996032446622849, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -31321, -3276, 2709, -16218, 10821, -17296, 19256, -3694, 7220, -9605, 19187, 15577, -5881, -27006, 74, 9497, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 6.040584048605524e-05, 7.1054426371119916e-05, 5.5722102842992172e-05, 5.0729377107927576e-05, 7.1633228799328208e-05, 0.00013671196938958019, 4.9293743359157816e-05, 5.1046088628936559e-05, 0.00011075380461988971, 0.00012429633352439851, 8.1965830759145319e-05, 7.0466201577801257e-05, 9.706890705274418e-05, 8.5820174717810005e-05, 5.9999048971803859e-05, 7.2543967689853162e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 16,17,7,24,-28,-67,1,-10,-5,-80,23,12,54,-79,51,34,-89,-11,55,3,102,43,-64,-8,-7,26,113,89,19,62,47,-22,9,14,28,-5,36,42,-19,-19,127,34,16,-8,11,-1,7,-33,21,-22,107,17,-55,-18,11,53,1,-16,-8,23,-36,43,-55,-32,3,1,82,16,24,-27,24,28,-10,37,11,21,41,-32,77,25,-19,54,27,35,-59,21,-5,85,23,13,-83,3,12,20,104,97, 
  /* [1][0][][] */ 17,49,-58,-18,-2,-71,91,-81,-42,-27,-71,-5,-18,-40,-13,-31,11,-50,-34,-21,10,-39,83,-22,-3,-10,12,67,-35,-19,-29,19,-28,26,24,27,-19,52,-53,68,29,7,13,-42,49,-40,-9,34,-62,12,34,-65,-28,17,36,32,31,0,-68,-2,-52,-5,-23,-21,16,32,93,-3,-31,-127,-5,-3,18,54,-22,33,-57,-8,97,-32,29,-32,41,-56,-16,-53,-3,4,-12,-38,29,13,59,-6,-21,33, 
  /* [2][0][][] */ -3,-8,27,3,73,63,-37,23,-60,28,24,-3,54,0,37,19,37,-62,-127,14,-8,-59,-14,23,-11,7,-27,25,-32,-19,-34,76,-10,-26,9,30,-25,18,-19,-49,75,17,20,39,3,57,16,1,-119,-18,-25,14,2,37,25,-74,47,23,66,31,-29,2,-12,44,44,2,-63,26,3,-12,-9,-38,28,27,36,42,-59,-26,-51,-40,22,48,45,-5,-9,-39,-24,-50,-48,-11,-38,72,-12,-3,96,-50, 
  /* [3][0][][] */ 15,-46,-5,-91,-24,-6,101,-22,58,101,-50,-32,29,-29,-20,52,45,72,-13,40,-36,9,36,-17,-34,97,54,-9,-18,-18,-91,52,19,-12,39,-1,17,-60,-42,47,21,32,-35,42,62,-37,17,46,40,-20,39,-46,127,48,36,-31,12,3,20,-42,-74,62,96,-22,-26,-17,98,-52,-8,-9,-38,43,-6,-90,7,-97,1,-53,102,4,-22,-45,-53,-28,-41,-28,75,98,-46,70,-77,7,20,-110,-33,33, 
  /* [4][0][][] */ -11,42,34,0,-4,-4,-18,-10,-6,-27,14,-4,20,59,-36,28,-30,-24,-24,-66,8,-33,-49,7,-13,-28,-5,-2,-52,127,-73,-20,-11,-36,-6,-61,78,27,-37,12,21,12,22,-29,-41,2,46,-22,21,-6,-67,-10,-82,28,52,15,15,70,-40,37,-16,-81,-5,11,45,17,-36,-15,6,15,11,-48,-13,39,34,45,-24,32,-30,51,17,74,41,-50,25,-45,-18,-53,-25,-43,-38,-11,10,-12,11,-40, 
  /* [5][0][][] */ -13,-4,40,-11,-24,-20,-6,18,43,-4,-7,10,-6,-14,18,-26,-29,19,-36,-19,-11,17,-10,-7,31,-35,67,-15,0,23,-2,82,2,-61,37,22,-15,-36,-50,-20,-35,9,-28,24,12,30,-55,32,-28,24,55,7,30,-61,9,19,-12,-41,18,-21,16,45,33,27,-33,21,108,-39,7,-10,24,9,-17,17,33,-2,-17,-17,127,41,-35,4,-39,36,35,67,-1,92,-11,-22,-19,21,31,-12,-31,27, 
  /* [6][0][][] */ 6,-19,67,7,-76,88,-53,-121,21,-91,-127,74,22,-35,-64,118,0,74,24,-39,-80,-33,-87,-98,9,-90,5,63,-97,91,-18,-50,82,97,-13,37,3,-38,5,-15,-55,30,14,-33,43,75,-86,18,76,40,-85,-98,108,6,-19,-25,42,-63,49,-34,-50,-34,53,-30,89,-53,-63,-97,-96,15,-10,-90,-49,-118,45,-120,111,-10,-69,51,-43,75,-5,-106,72,-32,0,0,-80,89,-78,100,34,-62,70,-98, 
  /* [7][0][][] */ 9,-6,-55,72,-2,-10,46,-22,-116,8,67,58,-11,-40,20,-22,-8,-38,-22,-18,-54,-28,-56,-17,47,57,1,64,-4,41,29,14,-72,-127,11,67,5,27,-27,-8,-22,-11,24,-82,13,33,51,58,-9,16,-61,-20,14,-53,52,-41,-12,44,-90,0,42,-7,-8,-11,59,-68,79,11,-71,-56,53,5,5,-21,-71,-15,33,-36,82,-42,12,-10,-48,-46,51,1,-72,27,-32,13,1,10,58,-44,88,-31, 
  /* [8][0][][] */ -22,-55,-2,7,-27,-6,10,9,1,-5,69,46,23,42,-57,-14,59,13,32,11,-18,-64,-12,-33,-19,-28,73,6,-11,42,10,-24,-1,-1,-1,21,-43,-27,14,-30,5,46,35,-27,2,-17,37,-1,27,10,56,11,1,33,-58,4,-5,113,-60,9,-13,-42,-37,-16,-73,-23,-17,27,11,8,44,-20,-33,-127,35,-111,13,23,-64,34,-39,-10,-14,79,50,-42,-35,66,-19,90,9,-12,-59,4,-9,-52, 
  /* [9][0][][] */ -41,-23,-24,27,-16,17,-9,42,-24,-6,60,58,-17,44,26,-46,2,41,-4,-28,23,42,4,-10,-1,22,6,21,31,-3,11,1,1,-12,15,79,-11,0,6,-11,6,-20,-3,12,3,69,12,51,-47,9,-4,43,117,10,-23,-20,11,-6,29,19,-44,9,71,-12,27,38,45,-16,20,-15,-9,31,-7,-127,-37,-123,-40,-18,32,3,-19,8,-15,-25,38,33,-51,-4,2,90,33,44,35,49,-10,26, 
  /* [10][0][][] */ 36,29,7,12,-1,25,-37,-37,43,11,-13,14,10,-12,-1,-48,-28,-2,3,-18,29,-22,-32,-20,-2,-7,-101,50,-8,57,-19,16,6,7,-26,-5,10,21,8,-18,26,6,69,-55,-37,-22,10,16,2,-13,-4,-38,-42,-22,6,25,-18,24,-26,-19,-48,-43,-17,22,-15,-33,-107,-7,-55,-55,37,-32,-11,31,29,18,36,-19,-111,1,7,22,16,-18,14,-6,-76,-127,-28,22,4,14,42,-33,33,13, 
  /* [11][0][][] */ 32,-57,-7,7,-29,38,25,1,33,-4,-25,-26,3,16,28,-5,-19,21,-4,-74,9,15,-5,-5,21,12,35,11,8,-41,-4,25,-4,86,-82,-9,1,-2,63,-2,-46,33,-6,2,-37,-16,-23,-22,32,-30,-28,-26,-20,-5,-57,72,-42,-5,2,-38,27,-10,-23,-44,-10,-59,-127,-55,-14,-23,-86,33,59,24,-10,8,28,44,-113,-44,2,-7,2,-15,-9,-17,37,57,1,-49,14,-13,-26,-4,77,23, 
  /* [12][0][][] */ 12,17,-35,-31,18,-13,12,24,55,-25,-5,20,-8,-15,3,20,29,-60,-25,16,16,66,-3,54,-29,-53,-127,6,58,-31,52,-3,-27,-57,69,20,22,-7,0,19,1,-46,14,38,25,-1,20,-15,-56,14,-41,90,72,-28,9,-57,5,0,-35,-30,11,28,56,5,-25,-9,51,20,100,20,16,17,-4,-1,-10,5,-36,-41,55,-50,19,-28,23,-30,-4,0,14,-89,-5,23,-34,13,28,53,-5,52, 
  /* [13][0][][] */ 3,13,-62,19,46,25,-14,-14,-5,71,-46,39,-50,-27,59,-36,10,17,42,6,-45,-52,-13,39,41,44,-2,29,26,62,41,-23,-38,57,-14,19,15,-34,-36,-48,-14,-23,17,4,47,31,-47,34,-48,16,-20,-16,-28,-49,51,55,5,-77,-6,-15,40,3,-9,-9,1,73,127,66,13,-1,-52,-17,53,53,-71,62,33,-62,127,-38,-2,-23,39,-11,27,39,-24,-31,-24,-29,-2,27,48,15,58,45, 
  /* [14][0][][] */ -19,61,6,33,-70,-30,35,20,-60,-14,41,26,-79,8,77,-24,-56,4,-56,32,2,59,-74,15,-59,-29,-69,-79,12,-5,25,97,-53,57,31,23,-9,-56,-24,-71,49,-23,76,-30,-20,48,-66,25,-30,-53,72,42,5,36,-30,2,-35,13,17,43,43,87,-20,40,20,-33,-9,-39,35,44,57,39,-37,47,-2,15,22,-4,14,10,-74,112,-7,-118,77,21,0,10,-127,-16,-35,17,-45,42,37,15, 
  /* [15][0][][] */ 81,-44,12,23,53,8,-14,-21,-7,40,-62,-28,47,60,2,-10,-25,-1,-94,29,-14,-31,1,46,45,-29,68,26,44,-8,-30,52,38,41,-12,-101,50,74,74,47,61,29,3,-12,-43,-127,17,-51,-21,-31,-25,-20,-28,-49,-18,57,-21,-7,-5,10,14,-57,-44,45,31,23,-75,68,-20,-36,-17,-15,20,-98,-38,-78,-3,19,-118,15,89,-34,64,7,-43,-19,-4,-19,31,67,15,-74,-28,-36,37,-52, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.002567248186096549, 0.0030198129825294018, 0.0023681893944740295, 0.0021559984888881445, 0.0030444122385233641, 0.0058102584443986416, 0.0020949840545654297, 0.0021694586612284184, 0.0047070365399122238, 0.0052825938910245895, 0.0034835478290915489, 0.0029948134906589985, 0.0041254283860325813, 0.0036473574582487345, 0.0025499595794826746, 0.0030831187032163143, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 12684, 2537, -5333, 3931, -667, -559, -63, 3856, 477, -6541, 1515, -4719, 4699, -3882, -1902, -3898, 1513, -3021, -6209, -403, -3957, -886, -6672, -117, 108, 4311, -11187, -8082, -3541, -1880, -3427, -2491, 11803, 207, -1153, -2393, 136, 11943, 7666, 14639, -1087, 4134, 1365, 3442, 60, 1301, 14323, 7005, -11068, 1169, -4417, 3355, 1972, -2773, -3856, 3655, 4167, 1911, 198, 359, -1143, -3991, 2371, 3665, 9840, 1050, 10273, 6337, 1793, -4175, 10090, 852, 718, 125, -5518, -1049, 15726, 8097, 6072, 10821, 14016, 83, 12190, 11222, 865, 447, 9479, -5418, 9302, -256, -4593, 4407, -451, 1981, 27423, 1749, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 9.9457131000235677e-05, 0.00024565088097006083, 0.00019836789579130709, 0.00019999578944407403, 0.00024102917814161628, 0.0005059807444922626, 0.00010875210864469409, 0.00020042588585056365, 0.00032108742743730545, 0.00013811925600748509, 0.00028173843747936189, 0.00018942639871966094, 0.00010089908755617216, 0.00011947066377615556, 0.00020636781118810177, 0.00026393585721962154, 0.00029775436269119382, 0.00028079966432414949, 0.00015910736692603678, 0.00034920661710202694, 0.00021519948495551944, 0.00030633242568001151, 8.0511861597187817e-05, 0.00017079472308978438, 0.0022968691773712635, 0.00018163694767281413, 0.00019908547983504832, 0.00011673293920466676, 0.0002997575793415308, 0.00022960902424529195, 0.00015587091911584139, 0.00021191420091781765, 9.0322406322229654e-05, 0.00042112817754969001, 0.00017036164354067296, 0.0002303765359101817, 0.00033156617428176105, 0.00012772473564837128, 0.00017019569349940866, 8.1650527135934681e-05, 0.00057462474796921015, 0.00023573795624542981, 0.00031027427758090198, 0.00019546337716747075, 0.00029539261595346034, 0.00026134212384931743, 9.1954025265295058e-05, 0.00017873893375508487, 8.8361339294351637e-05, 0.00039205318898893893, 0.00018089821969624609, 0.00016553832392673939, 0.00014890680904500186, 0.00027958309510722756, 0.00026305415667593479, 0.0002281298948219046, 0.0001106924974010326, 0.0004619479295797646, 0.00048264773795381188, 0.00041094672633334994, 0.0003018780262209475, 0.00031069485703483224, 0.00020551560737658292, 0.00013266599853523076, 0.0002201994793722406, 0.00038844873779453337, 0.00016084381786640733, 0.00013275208766572177, 0.00022610352607443929, 0.00030900965793989599, 0.00010354774713050574, 0.0003129933902528137, 0.00051877304213121533, 0.00019088968110736459, 9.4918468676041812e-05, 0.0002242238842882216, 7.9613215348217636e-05, 0.00016520611825399101, 0.00020445605332497507, 0.0001867241517174989, 0.00012498744763433933, 0.0002729112165980041, 0.00011904259736184031, 0.00020216374832671136, 0.00011185146286152303, 0.00023665741900913417, 0.00010396530706202611, 0.0001955253683263436, 0.00012280013470444828, 0.00026259632431901991, 0.00018538028234615922, 0.00021966321219224483, 0.00044956326019018888, 0.00016435357974842191, 6.8508925323840231e-05, 0.00027837909874506295, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -124,-23,16,-40,115,4,49,-37,0,2,-14,-12,-34,19,-3,-36,-32,34,46,-7,8,37,14,39,-9,21,-10,32,27,-15,24,18,-34,8,44,-11,13,-109,-83,14,18,4,55,-30,-24,72,-92,-27,31,-7,9,28,-84,10,47,-19,-26,-22,18,-21,-4,3,-31,-19,10,-12,-53,-73,-31,44,-35,-10,16,22,20,-19,43,-20,127,-58,-34,9,-127,-44,-40,-17,-7,4,-73,-4,0,-65,-12,37,-66,0, -24,34,51,-90,-15,-1,127,-105,5,3,-45,6,-28,-24,-93,80,-23,104,127,-20,-13,127,80,127,24,60,85,108,127,54,127,-9,-28,-7,-127,-3,-20,-127,127,-31,-28,-127,13,-59,59,-44,-76,-19,127,-3,34,92,-114,28,-74,-18,-86,-10,9,34,-36,-127,-127,-95,-37,8,-10,-114,-35,24,-60,73,-127,-8,33,-12,-122,-20,1,-127,-2,-6,4,-101,127,77,-103,49,-64,-8,-18,-16,7,118,-127,-126, -102,7,24,29,53,1,40,-50,-13,24,-12,3,26,-5,-15,-40,-19,0,14,-40,12,16,47,31,-6,56,-13,-2,19,-7,43,16,-40,2,45,108,-14,-33,-72,-75,-3,-46,8,-28,3,-35,-61,-42,6,-16,15,36,0,-4,24,-23,31,-2,2,-40,14,4,-52,71,-12,-32,127,-3,-25,38,65,-29,34,-7,-23,43,-47,32,-52,-45,-43,-11,-113,-72,6,-42,-15,-12,-78,-44,-8,38,-1,23,-5,15, 
  /* [0][1][][] */ -38,-23,71,-27,47,107,-4,-35,4,-10,-36,-6,-127,47,24,36,-20,70,69,29,43,-9,66,-24,24,22,107,32,-3,-20,4,0,-127,-14,50,1,5,-115,-95,-109,-11,3,70,37,-60,127,-127,-96,123,35,20,-57,-124,57,91,-20,-9,-30,32,-24,25,-4,57,-88,-53,15,-16,-28,-25,14,-121,23,26,127,14,-74,-60,-107,-86,24,-93,-17,-41,-82,-15,24,-76,48,-127,127,107,-121,127,-2,-27,-15, 112,127,127,127,-127,-127,69,-116,127,127,-90,-54,-85,127,-31,127,127,-127,-7,127,127,-67,65,-124,-127,-127,127,127,-107,127,-6,127,-58,127,93,-97,127,53,-2,-49,127,6,-127,-81,127,-5,84,100,122,-127,127,-127,119,127,-127,127,-127,127,-127,127,-107,125,77,-127,127,127,-20,127,-122,-127,-33,-127,-17,113,127,72,40,-127,93,-64,22,127,71,127,126,62,-127,127,-42,56,-36,-30,-77,-23,-106,-51, -127,-49,61,15,-1,66,-24,-7,-27,-9,-5,127,-60,11,17,15,-32,64,30,-12,19,-19,111,-33,30,43,27,7,-2,-18,36,6,-83,-43,101,127,-22,-65,-107,-127,-32,-6,15,-29,-52,-81,-95,-127,53,42,10,-41,127,4,114,-57,59,-25,51,-30,21,-11,-81,9,-74,-24,-66,-30,-24,35,-127,-20,27,-94,29,127,-127,-33,-60,-16,-108,-20,-67,-99,-30,25,-68,37,-92,-66,127,127,-37,-26,-65,-11, 
  /* [0][2][][] */ -46,-71,-59,-55,40,-2,-28,20,-2,21,25,9,56,28,8,-35,-8,8,-31,-3,8,-16,32,-20,-10,-5,14,24,10,-29,-14,22,16,7,-29,-3,3,-13,-28,-50,-9,36,3,79,10,-19,-75,-22,-19,-9,-5,-41,-8,-37,45,-20,-27,-17,-2,-19,12,26,-21,44,-61,-28,115,50,21,51,23,9,-16,-7,21,-28,-3,37,-48,-13,-98,-20,-80,-2,-33,-13,38,-21,-20,1,-16,-53,-14,-23,-103,-26, -42,-101,-5,-77,-68,-2,24,127,-47,73,127,5,-17,53,127,45,-15,-32,-10,-64,1,-47,127,6,8,-2,16,33,-1,17,-72,-21,-11,-36,-103,-7,-103,-85,43,-100,-27,-77,-68,127,12,-34,-81,-30,57,-23,-1,-38,65,34,-45,-44,-64,-40,31,-47,127,45,84,13,-103,-64,-25,-4,127,58,-110,-5,-2,-32,56,-26,-52,-9,-13,76,-119,-32,-69,-40,11,-127,25,6,41,-7,30,-20,16,-127,-114,127, -71,-2,-51,35,31,-8,5,28,-13,-7,7,79,60,31,1,-60,-11,16,-48,-15,4,2,61,-8,-11,-22,-40,18,9,4,-12,23,-17,-1,-36,6,-25,-57,-38,-37,-23,-9,-23,18,-3,-34,-79,-21,-7,-14,-7,-17,1,-24,45,-17,26,-10,15,-8,3,27,6,60,-51,-50,-35,43,32,40,-51,-20,-33,-39,4,-4,-96,-7,93,1,-127,-14,-79,51,-70,-16,36,4,-40,8,-20,-6,0,-33,-74,-23, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0042269281111657619, 0.010440162383019924, 0.0084306355565786362, 0.0084998207166790962, 0.010243739932775497, 0.021504180505871773, 0.0046219644136726856, 0.0085180997848510742, 0.013646215200424194, 0.0058700684458017349, 0.011973883025348186, 0.0080506214872002602, 0.0042882109992206097, 0.0050775031559169292, 0.0087706316262483597, 0.011217273771762848, 0.012654560618102551, 0.011933985166251659, 0.006762063130736351, 0.014841280877590179, 0.0091459779068827629, 0.013019127771258354, 0.0034217541106045246, 0.0072587756440043449, 0.097616933286190033, 0.007719570305198431, 0.0084611326456069946, 0.0049611497670412064, 0.01273969653993845, 0.00975838303565979, 0.0066245142370462418, 0.0090063530951738358, 0.0038387023378163576, 0.017897946760058403, 0.0072403699159622192, 0.0097910026088356972, 0.014091561548411846, 0.0054283011704683304, 0.0072333165444433689, 0.0034701472613960505, 0.024421552196145058, 0.010018862783908844, 0.01318665686994791, 0.0083071934059262276, 0.012554185464978218, 0.011107040569186211, 0.003908046055585146, 0.0075964047573506832, 0.0037553568836301565, 0.016662260517477989, 0.0076881744898855686, 0.0070353788323700428, 0.0063285394571721554, 0.011882281862199306, 0.01117980107665062, 0.0096955206245183945, 0.004704431165009737, 0.019632786512374878, 0.020512528717517853, 0.017465235665440559, 0.012829815968871117, 0.013204531744122505, 0.0087344134226441383, 0.0056383046321570873, 0.0093584777787327766, 0.016509070992469788, 0.0068358620628714561, 0.0056419637985527515, 0.0096093993633985519, 0.013132910244166851, 0.0044007790274918079, 0.013302219100296497, 0.022047853097319603, 0.0081128114834427834, 0.0040340349078178406, 0.0095295151695609093, 0.0033835617359727621, 0.0070212599821388721, 0.0086893821135163307, 0.007935776375234127, 0.0053119664080440998, 0.011598726734519005, 0.0050593102350831032, 0.0085919592529535294, 0.0047536869533360004, 0.010057940147817135, 0.0044185253791511059, 0.0083098281174898148, 0.0052190055139362812, 0.011160343885421753, 0.0078786620870232582, 0.0093356864526867867, 0.019106438383460045, 0.006985026877373457, 0.0029116293881088495, 0.011831111274659634, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 2732, 6577, 388, 1008, 4461, 18433, 214, 3352, 9776, -466, 12227, 2788, 2117, 729, 3808, 1325, 4536, 2694, -800, 8578, 978, 4759, -1883, 1314, -8769, 666, 3043, 2467, 8659, 1207, 2958, 2278, 1496, 12887, 5743, 7277, 3523, 2193, 3739, 3815, 14816, 3110, 3333, 2006, 3530, 10530, 5013, 7168, 1965, -1196, 1179, 6325, 4752, -3030, 5986, -149, 4485, 6253, 558, 2996, 4165, 13642, 4395, -699, 12640, 13787, 2358, 3484, 6550, 6089, 2382, 1315, -4046, 7905, 2503, 4334, 406, 9425, 4358, 6529, 3703, 908, 6185, 8679, 365, 4934, 4081, 1922, -776, 3547, 1573, 18394, 4328, 3179, 4646, 8354, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00013038137694820762, 0.00011534196528373286, 0.00019795385014731437, 0.00030782123212702572, 0.0001530230074422434, 5.0757444114424288e-05, 0.00024681803188286722, 0.0001370659883832559, 8.4038088971283287e-05, 0.0001772023388184607, 7.1188616857398301e-05, 0.00017839393694885075, 0.00014379483764059842, 0.00029569788603112102, 0.0001369217352475971, 0.0001002867502393201, 0.00014570908388122916, 0.00020466942805796862, 0.00021179158648010343, 9.4670111138839275e-05, 0.00020636535191442817, 0.00014573379303328693, 0.00015960428572725505, 0.00015833052748348564, 9.2758913524448872e-05, 0.00019252824131399393, 0.00012865044118370861, 0.00016879742906894535, 0.0001030691055348143, 0.00023283666814677417, 0.00017551933706272393, 0.0002047547313850373, 0.00024645720259286463, 6.5961918153334409e-05, 0.00010815507266670465, 9.8552205599844456e-05, 0.00016381716704927385, 0.00017440458759665489, 0.00012718635844066739, 0.00012290106678847224, 5.9921912907157093e-05, 0.00011357499897712842, 0.0001333098771283403, 0.00012938704458065331, 0.0001288907224079594, 7.9495679528918117e-05, 0.00012773476191796362, 0.00011249485396547243, 0.00015832531789783388, 0.00019200994574930519, 0.00025610357988625765, 0.00012402923312038183, 0.00011668348452076316, 0.0001250558125320822, 0.00011381679360056296, 0.00018328554870095104, 8.8011940533760935e-05, 0.00013017882884014398, 0.00018066464690491557, 0.00012154765863670036, 0.00011511861521285027, 7.0050082285888493e-05, 0.00016139337094500661, 0.00018824318249244243, 7.1090391429606825e-05, 6.471935921581462e-05, 0.00020173309894744307, 0.00018026732141152024, 0.00012645406241063029, 9.0786175860557705e-05, 0.00018506030028220266, 0.00017720373580232263, 0.00012219167547300458, 9.2543014034163207e-05, 0.00012937904102727771, 0.00014001534145791084, 0.00018201179045718163, 8.7723747128620744e-05, 0.0001274455280508846, 0.00014440937957260758, 0.00011804179666796699, 0.00019814721599686891, 9.6435986051801592e-05, 0.00010257257963530719, 0.0001317592104896903, 0.00015247569535858929, 0.00015370264009106904, 0.00018509982328396291, 0.0002181162271881476, 0.00016835445421747863, 0.0001822790945880115, 5.1242292101960629e-05, 0.00013939534255769104, 0.00014304662181530148, 0.00013029934780206531, 8.8006083387881517e-05, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 45,24,19,37,-101,-3,127,19,75,124,-66,25,37,-3,59,57, 
  /* [1][0][][] */ -43,30,-108,5,127,110,10,10,-3,20,-72,6,-85,102,-29,-30, 
  /* [2][0][][] */ -26,72,82,-14,46,64,18,21,32,11,19,-28,42,-127,4,5, 
  /* [3][0][][] */ 127,-11,30,-15,14,21,5,-3,42,42,-57,-20,-25,36,-9,62, 
  /* [4][0][][] */ -97,-63,37,48,-99,-32,-127,-24,-44,64,-10,-39,-4,67,-72,101, 
  /* [5][0][][] */ -102,21,64,1,100,19,5,-2,-63,37,-36,15,-68,78,-127,-24, 
  /* [6][0][][] */ -127,23,-58,14,-2,-93,65,2,-14,-26,-66,83,34,29,-86,1, 
  /* [7][0][][] */ -43,66,45,-127,100,46,64,29,31,21,-33,11,38,-10,-42,-16, 
  /* [8][0][][] */ 15,7,-29,84,-76,80,1,-90,71,-43,76,16,127,21,-49,30, 
  /* [9][0][][] */ -26,-127,-35,57,-9,-46,-30,57,62,68,13,75,-70,5,-6,-38, 
  /* [10][0][][] */ -44,-76,-51,76,-93,127,29,-93,-32,-51,40,-28,43,100,-89,68, 
  /* [11][0][][] */ -73,-94,14,25,-45,84,45,-17,45,3,45,-98,17,127,-90,117, 
  /* [12][0][][] */ -19,-127,-105,88,-79,-77,-8,97,78,32,-12,108,-1,-65,-66,-13, 
  /* [13][0][][] */ -70,-32,-34,10,-9,3,18,23,0,127,-7,-19,30,18,14,-25, 
  /* [14][0][][] */ -102,-83,-111,-33,-15,99,-86,-91,126,-71,121,14,98,-53,-127,-66, 
  /* [15][0][][] */ 17,-127,123,-76,-50,-31,21,51,33,-42,-118,-32,109,-61,-16,-69, 
  /* [16][0][][] */ -21,-12,16,-65,56,58,-5,-42,90,-125,28,0,11,-24,-91,-127, 
  /* [17][0][][] */ -16,-14,21,-23,5,9,-18,6,51,-70,28,43,127,-28,-55,-115, 
  /* [18][0][][] */ 23,18,-82,-127,-19,-26,96,-22,-19,36,25,85,-55,101,-16,-70, 
  /* [19][0][][] */ -51,-3,-92,-127,-105,90,0,-32,53,-29,27,-127,-49,28,-63,-16, 
  /* [20][0][][] */ 33,32,53,-64,42,4,-59,102,-48,-127,27,-76,-6,60,-39,-35, 
  /* [21][0][][] */ 45,-25,-127,-27,71,56,81,53,-39,-58,-14,39,82,-104,-53,11, 
  /* [22][0][][] */ 54,-22,107,-22,-6,19,92,-1,50,127,29,40,12,-1,121,-10, 
  /* [23][0][][] */ -127,-45,-12,108,9,72,38,10,-46,-36,4,-114,-20,78,53,116, 
  /* [24][0][][] */ 12,-37,12,19,36,-55,29,-65,15,91,-127,69,10,-60,60,-87, 
  /* [25][0][][] */ 127,-44,105,118,74,-39,-7,13,-105,121,41,-38,19,31,44,-42, 
  /* [26][0][][] */ -12,43,25,31,-71,127,-6,29,-58,-25,-103,45,14,39,67,-124, 
  /* [27][0][][] */ 32,-7,-10,-46,-65,20,-77,21,-94,-45,-55,-67,-102,35,-29,127, 
  /* [28][0][][] */ -127,64,44,-6,-3,-49,-118,10,-35,-62,-11,-58,-13,-49,-56,-23, 
  /* [29][0][][] */ -30,-92,-9,76,-34,1,122,-10,69,69,-127,29,10,-19,-46,62, 
  /* [30][0][][] */ 58,-34,-45,-8,-127,11,57,-37,36,7,-10,-14,23,41,5,64, 
  /* [31][0][][] */ -127,2,7,60,-17,1,-17,-18,-38,-22,13,-40,-42,-18,-16,95, 
  /* [32][0][][] */ -127,-66,-87,-21,-105,-66,20,-31,110,58,-67,-74,43,43,60,23, 
  /* [33][0][][] */ -17,-12,-99,66,-122,-64,26,13,-101,-11,-25,-29,-52,127,54,88, 
  /* [34][0][][] */ 22,49,-32,31,-41,-44,3,36,0,-127,-13,46,-63,9,41,94, 
  /* [35][0][][] */ -19,12,-107,-29,-127,-2,104,-47,9,28,-23,-17,-40,99,42,69, 
  /* [36][0][][] */ 8,-3,-62,57,127,2,39,65,-40,28,-79,-119,1,-38,25,45, 
  /* [37][0][][] */ -127,81,-2,-107,27,-88,-21,-60,-53,-36,-34,45,71,-99,47,-102, 
  /* [38][0][][] */ 21,104,48,-34,-75,4,-96,5,-8,-127,44,6,-52,-126,119,25, 
  /* [39][0][][] */ -13,-44,10,66,7,127,113,-77,-16,49,-6,-39,5,113,103,123, 
  /* [40][0][][] */ 127,66,89,99,-38,-46,43,23,-50,52,-29,-4,21,8,109,0, 
  /* [41][0][][] */ -41,-10,4,58,-117,127,-2,59,-78,15,-109,-6,-9,59,59,-106, 
  /* [42][0][][] */ -29,-114,8,-3,96,72,70,33,-24,-127,-79,-77,-28,-7,-5,35, 
  /* [43][0][][] */ -59,-97,2,16,127,-15,-17,69,-67,-41,-127,-79,83,16,-55,50, 
  /* [44][0][][] */ -23,-74,-52,-127,60,25,32,-1,-87,-57,-81,124,-34,36,-50,82, 
  /* [45][0][][] */ 70,-76,-97,-41,-101,91,-73,-25,127,-62,80,-19,37,-45,-79,67, 
  /* [46][0][][] */ 45,-76,8,-1,91,-78,-27,76,15,-8,18,74,-23,-40,40,-127, 
  /* [47][0][][] */ -56,-17,1,57,-19,-5,22,22,-23,127,39,67,-26,49,-5,70, 
  /* [48][0][][] */ 41,-21,-94,-103,54,-65,11,59,60,-86,-2,31,-49,-4,-48,-127, 
  /* [49][0][][] */ 78,57,39,13,-50,-26,66,26,-2,127,-37,20,-5,-46,89,69, 
  /* [50][0][][] */ 2,10,10,0,-127,-13,1,-36,45,7,28,50,-8,-43,11,8, 
  /* [51][0][][] */ 5,-8,-64,-111,-65,127,41,-7,1,-33,79,-40,30,72,-17,69, 
  /* [52][0][][] */ 22,-43,-12,-60,73,-51,-14,8,32,-37,127,-66,15,-26,-14,90, 
  /* [53][0][][] */ -21,-53,54,-44,-45,-105,45,-127,8,79,-115,83,-9,-41,50,-91, 
  /* [54][0][][] */ 77,90,70,4,-104,-34,-85,-127,9,3,36,46,-55,-56,81,-14, 
  /* [55][0][][] */ 27,22,-18,71,-50,2,62,-28,28,127,9,52,15,10,27,62, 
  /* [56][0][][] */ 12,-76,-60,119,-70,-15,3,68,127,35,90,88,-57,11,29,121, 
  /* [57][0][][] */ 40,36,117,-34,37,15,-4,-14,58,-61,18,90,48,-68,127,-30, 
  /* [58][0][][] */ 104,-24,13,-104,30,-18,18,88,44,127,-20,64,82,-25,113,8, 
  /* [59][0][][] */ -59,10,37,-41,36,-87,-25,32,30,12,-125,-95,-127,-32,87,-1, 
  /* [60][0][][] */ 87,-75,1,21,37,-3,-13,-56,92,127,16,115,8,-77,-72,-88, 
  /* [61][0][][] */ 31,7,40,18,-72,-117,-39,-37,-76,-23,-17,5,-57,-31,127,92, 
  /* [62][0][][] */ -15,29,-34,46,-23,127,-78,61,-47,-24,-1,52,-33,22,35,-51, 
  /* [63][0][][] */ 74,-33,-60,-127,-21,-56,80,-27,1,-94,-7,83,-18,107,40,-16, 
  /* [64][0][][] */ -15,45,40,-68,60,-92,57,73,-122,19,-127,-53,-4,71,95,50, 
  /* [65][0][][] */ -78,18,-66,-16,14,56,-19,-88,-111,-75,-12,-89,-127,74,-6,61, 
  /* [66][0][][] */ -22,32,-16,35,-22,127,-37,36,-66,17,-21,40,-34,26,24,-81, 
  /* [67][0][][] */ 22,-13,-83,-45,8,-53,61,-85,-18,8,35,127,-46,-9,-22,-85, 
  /* [68][0][][] */ 10,-127,10,40,20,-1,9,51,17,55,23,-4,-51,27,-36,-20, 
  /* [69][0][][] */ 33,3,23,-96,127,-9,-81,127,45,68,48,105,79,-37,-2,-110, 
  /* [70][0][][] */ 58,35,53,-59,112,24,-88,-61,-125,-108,-20,33,-23,21,-127,-21, 
  /* [71][0][][] */ 22,-67,31,1,55,-40,30,-9,-41,88,-109,6,61,127,18,23, 
  /* [72][0][][] */ 26,-11,29,2,-19,-11,-118,-43,9,46,1,89,35,114,-127,-22, 
  /* [73][0][][] */ -20,-31,-9,-24,44,-126,32,-45,94,127,90,-29,0,-8,-71,113, 
  /* [74][0][][] */ 27,19,-11,62,-92,-20,109,6,72,78,10,105,127,31,-43,16, 
  /* [75][0][][] */ -46,45,-8,45,-54,127,-33,23,-25,62,-70,42,-38,59,33,-97, 
  /* [76][0][][] */ -99,115,-39,-6,-74,-6,-25,1,80,98,-83,-27,15,-50,-127,27, 
  /* [77][0][][] */ 127,80,-119,124,39,48,54,62,47,-33,92,-72,46,3,37,-7, 
  /* [78][0][][] */ 32,-35,8,-74,62,-127,30,-53,55,41,111,-28,26,-35,-38,111, 
  /* [79][0][][] */ -50,44,2,34,-29,-36,-28,5,-127,-34,50,-15,67,29,-37,-22, 
  /* [80][0][][] */ -50,46,79,-28,36,48,20,-127,-55,38,-73,-42,12,-101,47,42, 
  /* [81][0][][] */ 116,49,22,-9,38,-51,89,117,-91,127,-98,-28,-15,42,100,90, 
  /* [82][0][][] */ 11,127,-113,-92,-12,8,122,-69,-47,21,-48,72,54,1,101,-37, 
  /* [83][0][][] */ -25,-44,-6,13,19,60,-29,-74,46,-51,127,29,36,-31,-70,-96, 
  /* [84][0][][] */ -119,-62,-13,-43,7,64,100,-20,64,99,73,127,62,91,-97,2, 
  /* [85][0][][] */ 99,5,27,-37,54,-15,3,45,31,90,-30,22,-29,53,127,23, 
  /* [86][0][][] */ -86,49,-49,15,20,72,6,24,74,26,127,-36,-39,70,-29,-11, 
  /* [87][0][][] */ 14,-55,23,-55,52,-127,32,-33,29,-12,64,-29,39,-42,-47,82, 
  /* [88][0][][] */ -83,68,41,-26,96,-35,49,13,-90,-59,91,-76,32,127,106,-93, 
  /* [89][0][][] */ -14,33,-4,30,-33,127,-12,26,-30,10,-42,25,19,53,22,-93, 
  /* [90][0][][] */ 32,-92,10,43,127,8,29,37,-19,-101,-96,-9,-9,10,-71,15, 
  /* [91][0][][] */ -2,2,-69,-28,39,-106,-127,66,-77,-27,-54,-61,-116,-83,51,73, 
  /* [92][0][][] */ 30,33,27,47,-127,-32,26,16,-44,-1,-1,-34,-26,-63,29,10, 
  /* [93][0][][] */ -1,-63,-127,10,-41,-23,34,102,51,33,32,59,-57,19,4,-4, 
  /* [94][0][][] */ 74,30,125,-45,29,-40,19,13,16,124,-20,54,21,11,127,-1, 
  /* [95][0][][] */ -60,-87,-7,-6,127,3,-2,111,-40,-27,-87,-77,11,21,-58,50, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0024897861294448376, 0.0022025909274816513, 0.0037801621947437525, 0.0058782096020877361, 0.00292215496301651, 0.0009692732710391283, 0.0047132815234363079, 0.0026174366939812899, 0.0016048063989728689, 0.0033838876988738775, 0.0013594306074082851, 0.0034066427033394575, 0.0027459319680929184, 0.0056467000395059586, 0.0026146820746362209, 0.0019150938605889678, 0.0027824868448078632, 0.0039084041491150856, 0.0040444103069603443, 0.0018078375142067671, 0.0039407899603247643, 0.002782958559691906, 0.0030478320550173521, 0.0030235082376748323, 0.0017713408451527357, 0.0036765539553016424, 0.0024567318614572287, 0.0032233861275017262, 0.0019682261627167463, 0.0044462908990681171, 0.003351748688146472, 0.0039100330322980881, 0.0047063911333680153, 0.0012596206506714225, 0.0020653486717492342, 0.0018819706747308373, 0.0031282820273190737, 0.0033304612152278423, 0.002428773557767272, 0.0023469408042728901, 0.0011442796094343066, 0.0021688486449420452, 0.0025457094889134169, 0.0024707983247935772, 0.0024613202549517155, 0.001518063829280436, 0.0024392460472881794, 0.0021482219453901052, 0.0030234085861593485, 0.0036666565574705601, 0.0048905997537076473, 0.0023684846237301826, 0.0022282088175415993, 0.0023880882654339075, 0.0021734659094363451, 0.0035000538919121027, 0.0016806918429210782, 0.0024859183467924595, 0.0034500046167522669, 0.0023210959043353796, 0.0021983257029205561, 0.0013376889983192086, 0.0030819966923445463, 0.0035947256255894899, 0.0013575549237430096, 0.0012358925305306911, 0.0038523315452039242, 0.0034424171317368746, 0.0024147895164787769, 0.0017336690798401833, 0.00353394472040236, 0.0033839142415672541, 0.0023333942517638206, 0.0017672179965302348, 0.0024706453550606966, 0.0026737581938505173, 0.0034757298417389393, 0.0016751884249970317, 0.0024337228387594223, 0.002757667563855648, 0.0022541473153978586, 0.0037838548887521029, 0.0018415589584037662, 0.0019587443675845861, 0.0025160976219922304, 0.0029117031954228878, 0.0029351331759244204, 0.0035346995573490858, 0.0041651865467429161, 0.0032149269245564938, 0.0034808344207704067, 0.00097853201441466808, 0.0026619185227900743, 0.002731644082814455, 0.002488219877704978, 0.0016805799677968025, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -5551, 11694, -23454, -1598, 16140, -17006, -40019, -4303, -5300, 8402, -14827, -13156, 4165, -9734, -2483, -2367, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.0001724815956549719, 0.00011586295295273885, 0.00012148691166657954, 0.000175669469172135, 0.00012238584167789668, 0.00012768323358613998, 0.00011991857900284231, 0.00012681673979386687, 0.00010728072811616585, 9.8552962299436331e-05, 0.00017696195573080331, 0.00010415253200335428, 9.873914677882567e-05, 8.1591504567768425e-05, 0.00014406214177142829, 0.00012909060751553625, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 18,35,21,-16,79,58,-39,51,-24,118,12,39,-39,39,-24,41,41,83,28,-56,-61,74,-13,64,60,52,43,56,-46,-39,-4,73,-34,14,-58,34,39,-127,-20,32,3,-24,55,-18,-3,-56,-57,-21, 
  /* [1][0][][] */ -53,8,-86,-29,-1,89,-65,16,-7,-33,-35,20,43,-14,-37,-13,-16,-31,0,30,-50,31,-89,-36,-38,-41,57,55,-20,-36,39,-44,2,-72,-24,50,8,-66,127,-29,-15,36,-58,-27,24,36,46,15, 
  /* [2][0][][] */ 6,7,53,-21,-27,-73,12,10,99,85,-51,27,125,-62,127,87,-65,-24,-43,35,89,-76,-47,-116,3,-30,30,-72,61,55,-35,32,45,-25,54,35,-60,21,3,-48,26,37,78,-9,34,-79,86,-51, 
  /* [3][0][][] */ 37,23,-34,-17,29,100,-1,-6,20,-33,37,-5,-23,-7,-2,45,-21,-70,41,-93,-1,-14,-42,-31,-27,73,127,69,-1,-26,32,23,51,-35,75,37,-33,-57,15,19,14,24,-11,-2,19,18,6,-14, 
  /* [4][0][][] */ 84,-12,15,-56,81,62,62,23,63,-29,-102,31,32,-16,20,-7,-97,-127,-21,-93,-23,9,-34,-24,-71,90,-97,93,-63,-62,27,63,27,-19,6,-35,-19,4,-39,18,-56,-20,0,40,-16,84,-36,-58, 
  /* [5][0][][] */ 20,5,-76,14,-34,70,8,-27,58,61,47,110,74,-40,37,16,-36,127,-19,54,9,-9,-78,-23,58,-13,-71,-29,-6,45,22,-38,-43,3,43,26,-35,-1,-92,-7,101,-14,24,45,-25,-6,-33,42, 
  /* [6][0][][] */ 63,27,22,61,18,-22,86,-50,-18,80,112,93,51,37,-48,68,53,-47,-66,92,37,-61,-35,46,-73,87,85,-1,99,54,-37,12,79,-74,-127,1,99,24,1,-2,19,54,48,-35,63,110,53,4, 
  /* [7][0][][] */ -90,-22,-23,13,-68,-84,32,50,101,113,-71,-86,-124,31,-6,-18,-106,111,-20,122,-62,54,34,52,-9,-104,-52,-89,46,36,-2,14,-14,-6,22,-23,-10,-63,127,14,12,31,12,-4,48,82,-50,-16, 
  /* [8][0][][] */ -7,-74,57,-66,80,-50,53,-26,-37,-97,12,15,-16,-11,20,24,7,-5,-30,106,-1,37,-27,18,56,-24,-65,-16,-127,-7,-54,-109,4,-44,-7,81,11,36,109,22,1,12,86,108,17,-69,-44,85, 
  /* [9][0][][] */ 21,-18,11,-63,40,78,-51,71,2,-34,-25,-9,33,-64,101,-12,19,-127,28,48,-52,32,50,-49,-27,-100,-11,85,57,83,-46,-33,-63,37,-14,115,-14,-55,-52,-48,-38,9,57,100,86,73,-56,16, 
  /* [10][0][][] */ -3,7,-27,-1,11,14,-52,-35,52,30,70,-7,-37,-2,52,-36,-65,127,-12,39,3,-9,16,36,-43,38,8,82,17,0,-22,-13,67,9,2,15,-7,-49,-44,20,-73,0,16,-15,24,43,27,22, 
  /* [11][0][][] */ -34,53,-33,44,33,64,-1,5,31,6,-127,-98,76,37,-10,-65,2,36,-16,-59,0,-16,125,11,38,5,-21,54,10,20,1,66,24,-7,-44,-7,28,97,117,14,24,-29,67,6,-78,-11,88,-11, 
  /* [12][0][][] */ -76,9,30,25,-65,-49,-7,3,-48,-23,-127,26,80,-109,11,41,62,93,99,-109,-30,37,-45,-85,9,-19,44,-27,-3,25,-29,64,64,98,29,-21,-52,-38,37,10,-32,20,63,-16,50,-24,-33,-24, 
  /* [13][0][][] */ -26,-115,-49,-108,5,24,56,-1,-100,9,109,-66,45,52,127,5,104,25,-14,-96,69,-74,121,11,-67,-4,-17,12,-50,-103,-104,7,45,-30,-58,83,19,-56,66,-63,7,39,54,42,40,-26,99,-66, 
  /* [14][0][][] */ 66,7,-67,24,-46,20,-106,-24,-36,62,70,42,-33,-68,11,-49,55,-124,7,10,113,-78,34,0,-13,127,-92,13,-42,-35,-96,18,126,34,107,-36,-89,2,-5,75,-21,-36,102,-39,-72,-45,-56,49, 
  /* [15][0][][] */ -68,4,40,10,96,0,2,41,29,63,-7,44,41,-4,-25,-20,4,37,-14,-42,39,-36,-37,-41,45,-62,-32,72,-43,-4,18,7,-53,-1,127,-12,-92,12,47,-11,-38,-24,6,-2,-30,-26,-9,0, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0073304674588143826, 0.0049241753295063972, 0.0051631936803460121, 0.0074659520760178566, 0.005201397929340601, 0.0054265372455120087, 0.0050965393893420696, 0.0053897113539278507, 0.0045594307594001293, 0.0041885008104145527, 0.0075208828784525394, 0.0044264825992286205, 0.0041964137926697731, 0.0034676387440413237, 0.0061226407997310162, 0.0054863509722054005, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 13415, 3313, 19043, -335, 13884, -1171, 42543, 327, 8239, 42041, 8631, 28921, 3869, 14752, 51637, 21425, 2118, 4324, -4491, 63627, 1504, 11608, 6010, 18642, 11066, 39262, -2206, -1605, 3974, 13831, 14821, 1283, 3023, 2572, 5859, 16895, 6493, 20493, 4659, 18392, 25871, 10016, 1816, 15877, 7785, 10851, 39697, 29713, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 7.4792886152863503e-05, 7.1149355790112168e-05, 8.6851352534722537e-05, 0.00020542323181871325, 0.00013553496683016419, 0.00011270379764027894, 3.3310545404674485e-05, 0.00030210355180315673, 0.0001031520077958703, 4.1769068047869951e-05, 5.3497871704166755e-05, 6.3244871853385121e-05, 5.6990385928656906e-05, 0.00010658612154657021, 3.2216448744293302e-05, 7.351583190029487e-05, 0.00011656790593406186, 5.6840392062440515e-05, 0.00015351873298641294, 3.0300312573672272e-05, 7.6186952355783433e-05, 8.1182974099647254e-05, 5.6111370213329792e-05, 0.00010690968338167295, 5.9225832956144586e-05, 5.6739321735221893e-05, 7.1820002631284297e-05, 3.765933433896862e-05, 0.00027816000510938466, 7.9243502113968134e-05, 9.3779046437703073e-05, 0.00030473712831735611, 0.0001294436224270612, 0.00018440125859342515, 6.3966828747652471e-05, 8.5116633272264153e-05, 6.0945723816985264e-05, 9.9711010989267379e-05, 8.7733773398213089e-05, 0.00010341939923819155, 4.4020005589118227e-05, 0.00016051440616138279, 0.00017171702347695827, 6.9884365075267851e-05, 0.00015630382404197007, 2.9824512239429168e-05, 5.08562006871216e-05, 4.9413494707550853e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -68,2,-115,101,-127,101,-3,127,-86,-23,10,-53,93,-37,-87,-41,101,44,108,-66,60,-127,105,-96,-62,-78,90,111,-107,-65,-90,85,37,-100,71,-60,-92,-127,95,-50,-43,-106,127,-97,76,69,-93,-13, -101,28,-93,127,-107,127,-8,55,-121,-70,76,-63,127,-51,-115,-78,127,86,127,-64,126,-117,79,-84,-100,-79,124,127,2,-41,-101,-21,83,-127,127,-73,-127,-83,127,-91,-125,68,120,-127,-64,106,-125,-62, -62,56,-57,7,-30,40,-14,-47,-106,-8,43,-35,69,-35,-73,5,95,65,86,-39,59,-46,40,-58,-96,-18,37,42,65,-7,-44,28,38,-62,71,-59,-67,-31,31,-27,-127,-63,18,-34,-102,101,-83,-86, 
  /* [0][1][][] */ -65,59,-12,72,-68,101,-85,71,-56,-111,53,-74,88,-102,-58,-103,60,78,-30,-121,58,-55,94,-98,-111,-82,120,127,-127,-105,-82,127,96,19,67,-70,-62,-112,76,-67,-116,-127,88,-114,116,83,-72,-121, -127,127,-70,96,-53,78,-118,114,-127,-127,127,-127,86,-82,-127,-127,75,127,-43,-127,127,-55,127,-127,-127,-127,127,62,-5,-127,-127,102,127,41,99,-127,-96,-64,78,-127,-104,92,64,-70,-79,127,-127,-127, -94,92,-127,11,-27,28,-91,48,-50,-34,78,-81,58,-73,-48,-5,57,71,-13,-54,37,-16,48,-55,-60,-69,40,29,64,-60,-23,23,36,4,48,-76,-63,4,26,-72,-61,-93,27,-99,-127,118,-25,-94, 
  /* [0][2][][] */ -58,43,38,35,-22,39,-127,-56,-5,-82,40,-53,69,-115,-70,-34,11,56,-47,-38,8,-1,46,-49,-60,-8,19,32,-81,-41,-7,-9,14,68,57,-43,-53,-17,-1,-27,-88,-74,16,-113,80,63,-31,-101, -72,63,-44,45,-27,5,-116,2,-6,-52,87,-81,45,-127,-36,-29,26,63,-61,-59,53,11,40,-53,-21,-35,9,40,-12,-60,-24,-65,6,57,27,-89,-32,21,8,-72,-13,41,-25,-105,-48,56,-67,-112, -10,44,-110,-4,-11,-11,-19,-24,-9,-1,40,-49,56,-103,12,-2,14,43,-38,-43,14,45,-1,-18,20,4,-6,47,26,-75,12,-65,-13,24,15,-44,-14,0,4,-20,41,-51,-12,-11,-71,84,4,-66, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.003178697545081377, 0.0030238477047532797, 0.0036911824718117714, 0.0087304869666695595, 0.0057602361775934696, 0.0047899112105369568, 0.0014156982069835067, 0.012839400209486485, 0.004383960273116827, 0.0017751853447407484, 0.0022736594546586275, 0.0026879070792347193, 0.0024220913182944059, 0.0045299101620912552, 0.0013691990170627832, 0.0031244228594005108, 0.0049541359767317772, 0.0024157166481018066, 0.0065245460718870163, 0.0012877632398158312, 0.0032379454933106899, 0.0034502763301134109, 0.0023847331758588552, 0.00454366160556674, 0.0025170978624373674, 0.0024114211555570364, 0.0030523501336574554, 0.0016005216166377068, 0.011821799911558628, 0.0033678489271551371, 0.0039856093935668468, 0.012951327487826347, 0.0055013536475598812, 0.0078370533883571625, 0.0027185901999473572, 0.0036174568813294172, 0.0025901931803673506, 0.0042377179488539696, 0.0037286854349076748, 0.0043953242711722851, 0.0018708502175286412, 0.006821861956268549, 0.0072979736141860485, 0.0029700854793190956, 0.0066429125145077705, 0.0012675417819991708, 0.0021613885182887316, 0.0021000734996050596, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 2442, -1717, 1306, -2132, 4347, -1287, 3243, -2409, 928, 916, 957, 4787, 511, -86, 237, 4327, -2155, 3263, 5242, 753, -1026, 1439, -579, 4672, 1948, 2491, 994, -1099, 5540, -621, 1321, -3895, -1299, 2654, -928, 2179, 1280, 498, -14, 5159, 1302, 11695, -2242, 1154, 7350, -123, 2810, 2266, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00021710142027586699, 0.00026734144194051623, 0.00025391555391252041, 0.00022593661560676992, 0.00017091927293222398, 0.00017454616317991167, 0.00021408604516182095, 0.00024148459488060325, 0.00029641517903655767, 0.00021610911062452942, 0.00036932429065927863, 0.00016914974548853934, 0.00035288551589474082, 0.00036768888821825385, 0.00028314432711340487, 0.00016898586181923747, 0.00025114568416029215, 0.00022765291214454919, 0.00017108311294578016, 0.00029284402262419462, 0.00028995066531933844, 0.00033516247640363872, 0.00025847135111689568, 0.00018546749197412282, 0.00023013631289359182, 0.00019822821195703, 0.00030344683909788728, 0.00022192443429958075, 0.00016590229643043131, 0.00033444259315729141, 0.00032292914693243802, 0.00012363540008664131, 0.00018453880329616368, 0.00032399370684288442, 0.00025857702712528408, 0.00028567973640747368, 0.00027669977862387896, 0.00034223517286591232, 0.00020019958901684731, 0.00016891832638066262, 0.00032713919063098729, 8.6332227510865778e-05, 0.00023449807486031204, 0.0003120440524071455, 0.00013505130482371897, 0.00031951954588294029, 0.00022282400459516793, 0.00028093365835957229, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 47,28,127,-26,46,106,-55,-62, 
  /* [1][0][][] */ 11,-119,-127,-9,81,43,49,8, 
  /* [2][0][][] */ -127,-15,-46,-39,45,31,-56,-25, 
  /* [3][0][][] */ 61,55,116,-90,-23,-127,-18,-24, 
  /* [4][0][][] */ -127,11,-65,-35,60,-1,-60,-84, 
  /* [5][0][][] */ -111,49,-57,-27,25,31,-85,-127, 
  /* [6][0][][] */ -53,-127,-105,35,114,22,18,58, 
  /* [7][0][][] */ -49,-127,-54,-61,-65,-51,21,68, 
  /* [8][0][][] */ 78,22,-14,-20,82,-77,-127,8, 
  /* [9][0][][] */ -29,67,-67,101,-80,-38,127,-16, 
  /* [10][0][][] */ -19,127,33,65,120,-10,-11,49, 
  /* [11][0][][] */ -83,-34,-16,-1,-112,116,127,-6, 
  /* [12][0][][] */ 49,36,-127,28,-4,-27,-55,-10, 
  /* [13][0][][] */ 46,-38,-50,2,5,-127,-23,-18, 
  /* [14][0][][] */ 1,-58,71,-25,127,-85,-41,27, 
  /* [15][0][][] */ -56,-29,7,127,59,96,-65,30, 
  /* [16][0][][] */ 116,32,-12,10,86,-86,-127,-10, 
  /* [17][0][][] */ 61,127,73,86,41,74,30,-100, 
  /* [18][0][][] */ 26,-10,7,13,127,20,8,-11, 
  /* [19][0][][] */ 3,127,41,8,-106,26,29,-24, 
  /* [20][0][][] */ -41,33,91,-92,-5,73,-18,127, 
  /* [21][0][][] */ -30,93,30,-126,42,46,9,127, 
  /* [22][0][][] */ -57,-57,-74,32,-127,112,99,-22, 
  /* [23][0][][] */ 74,40,-127,27,11,-44,-51,-17, 
  /* [24][0][][] */ -68,46,22,-14,-25,89,-127,104, 
  /* [25][0][][] */ -118,-59,-127,18,-73,-69,83,91, 
  /* [26][0][][] */ 64,-3,-50,-50,127,-26,126,-55, 
  /* [27][0][][] */ 126,-70,37,95,16,39,-10,127, 
  /* [28][0][][] */ 54,24,53,-8,127,-41,54,-21, 
  /* [29][0][][] */ -15,-14,-15,-48,-51,10,127,-15, 
  /* [30][0][][] */ 33,-127,-29,-66,-126,11,16,-50, 
  /* [31][0][][] */ 11,43,-15,-13,-127,-11,-25,-3, 
  /* [32][0][][] */ 61,-72,-75,76,5,-114,119,-127, 
  /* [33][0][][] */ 73,127,48,48,48,-34,-19,-43, 
  /* [34][0][][] */ -127,-29,113,6,-24,100,89,20, 
  /* [35][0][][] */ -44,69,127,-7,-71,-52,-25,16, 
  /* [36][0][][] */ -66,5,94,-11,-15,127,79,37, 
  /* [37][0][][] */ -32,-63,2,-127,-43,-69,76,20, 
  /* [38][0][][] */ 53,-28,91,-72,74,65,-127,17, 
  /* [39][0][][] */ -16,77,-127,-37,-32,7,30,50, 
  /* [40][0][][] */ 55,-47,27,31,9,9,15,127, 
  /* [41][0][][] */ -43,73,127,2,-2,114,-53,47, 
  /* [42][0][][] */ 48,-109,-108,8,-127,13,1,-77, 
  /* [43][0][][] */ 0,-48,24,-55,127,-43,11,21, 
  /* [44][0][][] */ -27,127,100,-7,12,34,-77,-4, 
  /* [45][0][][] */ -36,61,3,68,-127,65,-114,33, 
  /* [46][0][][] */ -41,-58,73,41,-126,-127,-28,10, 
  /* [47][0][][] */ -17,59,43,-86,-127,38,-13,41, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0019981060177087784, 0.0024604930076748133, 0.0023369269911199808, 0.0020794211886823177, 0.0015730657614767551, 0.0016064461087808013, 0.0019703537691384554, 0.0022225179709494114, 0.0027280750218778849, 0.0019889732357114553, 0.0033990982919931412, 0.0015567798400297761, 0.0032478030771017075, 0.0033840469550341368, 0.0026059357915073633, 0.0015552715631201863, 0.0023114343639463186, 0.0020952173508703709, 0.0015745736891403794, 0.0026952074840664864, 0.0026685784105211496, 0.0030846879817545414, 0.0023788567632436752, 0.0017069611931219697, 0.0021180734038352966, 0.0018244052771478891, 0.0027927912306040525, 0.002042494947090745, 0.0015268918359652162, 0.0030780625529587269, 0.002972097834572196, 0.0011378858471289277, 0.0016984139801934361, 0.0029818955808877945, 0.0023798292968422174, 0.0026292707771062851, 0.0025466231163591146, 0.0031497820746153593, 0.0018425489543005824, 0.0015546500217169523, 0.0030108452774584293, 0.00079456384992226958, 0.0021582171320915222, 0.0028719161637127399, 0.0012429527705535293, 0.0029407173860818148, 0.0020507741719484329, 0.0025855898857116699, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 18, 4440, 22348, -3902, 2030, -15808, 2800, -11902, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 7.4157971539534628e-05, 9.2442292952910066e-05, 0.00013866482186131179, 9.2764938017353415e-05, 0.00013012808631174266, 8.6842097516637295e-05, 7.6088508649263531e-05, 6.9598776462953538e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -44,-53,-29,-69,14,12,94,91,-101,-96,-32,10,-60,0,-51,37,-87,-2,42,127,69,-3,26,86,52,52,42,10,-87,-46,-61,-67,-61,84,43,-61,36,-39,98,4,40,6,-16,-71,32,-23,-33,-51, 
  /* [1][0][][] */ -22,51,-30,-35,-103,64,-26,-61,-39,77,-40,4,53,42,-19,-10,-28,-119,81,-45,127,3,-57,36,48,-14,-105,60,26,-19,47,36,-35,-26,13,-27,-8,102,-7,-42,49,42,-4,27,108,2,-35,61, 
  /* [2][0][][] */ -22,-32,100,-8,65,-51,-19,7,-33,3,-22,30,-2,-38,-47,-127,-34,-86,-23,19,-93,10,-24,-19,-30,0,-15,-51,-53,-6,-43,-21,-10,-11,35,15,12,-25,-41,0,22,-43,31,-55,-50,-51,-55,-36, 
  /* [3][0][][] */ 35,14,62,6,5,-38,35,85,-45,-20,48,-25,-53,38,-15,70,50,35,-24,34,-90,-50,109,5,16,-7,-49,-36,-55,59,127,-74,-4,-115,-28,36,-11,-70,-22,57,-93,-62,56,-5,-98,-83,62,14, 
  /* [4][0][][] */ 9,-32,73,-34,0,-7,-9,-21,-61,-12,-40,18,31,-88,51,-93,56,41,-3,-44,16,25,44,23,3,-18,76,-24,26,13,-127,-1,-36,-22,10,1,44,-6,53,-1,-35,-3,-88,42,-30,-102,-9,33, 
  /* [5][0][][] */ 25,-35,72,24,37,1,18,-6,-61,-4,-48,15,33,12,3,-34,94,85,-14,-23,82,-63,127,-77,-19,31,-4,53,12,9,-38,-53,-27,-41,-43,41,27,40,70,-2,-85,16,38,14,55,-28,91,5, 
  /* [6][0][][] */ -31,58,-119,96,33,9,44,36,-22,-7,39,-74,-86,-9,-28,36,-127,32,-7,97,10,58,-106,-95,-18,-26,5,77,-49,-30,-39,17,51,66,-41,2,-9,-5,79,-1,66,56,-97,-72,-36,116,-48,-28, 
  /* [7][0][][] */ 33,80,-71,-1,23,49,111,48,45,84,-103,-7,-56,13,-76,-51,24,45,106,94,80,3,127,40,106,87,-51,105,-64,11,-13,-78,11,-71,-34,49,-9,99,-53,81,-63,36,-2,-94,67,-29,51,-16, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0031517136376351118, 0.0039287973195314407, 0.0058932546526193619, 0.0039425096474587917, 0.0055304435081779957, 0.0036907889880239964, 0.0032337615266442299, 0.0029579480178654194, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { 844, 5549, -1245, -1475, -367, -1291, -1084, -6290, 582, 357, -4832, 23, -216, -1593, -3866, 2722, 9708, 1164, -232, -4805, -7777, 1658, 17852, -2346, 1704, -458, 4750, -6097, 736, 2882, -5916, 5518, 8024, 756, 2825, -35, 28, -682, 12139, 5089, 3317, -2394, 3763, 6888, -3069, 4643, 244, 3496, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00032690790249034762, 0.00016033675638027489, 0.00063962757121771574, 0.00022865735809318721, 0.00028685753932222724, 0.00025513063883408904, 0.00028332375222817063, 0.00029004167299717665, 0.0001269277126993984, 0.00034957588650286198, 0.0002403078688075766, 0.00094657385488972068, 0.00046074873534962535, 0.00026000713114626706, 0.00028698352980427444, 0.00085131527157500386, 0.00014102358545642346, 6.4237785409204662e-05, 0.00024068537459243089, 0.00019786502525676042, 0.00020290254906285554, 0.00020593967929016799, 9.9303288152441382e-05, 0.00046480525634251535, 0.00021622475469484925, 0.00044154166243970394, 0.00051646330393850803, 0.00018262071534991264, 0.00020142544235568494, 0.00035405618837103248, 0.00021951805683784187, 0.00016049713303800672, 0.0001046715333359316, 0.00025733554502949119, 0.0001721067528706044, 0.00038794428110122681, 0.0020389107521623373, 0.00037724096910096705, 0.00013904168736189604, 0.00014725382789038122, 0.00021933746756985784, 0.00018202446517534554, 0.00027891952777281404, 0.0001823302882257849, 0.00030488517950288951, 8.1249883805867285e-05, 4.8734887968748808e-05, 0.00021591436234302819, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 13,-60,10,16,-7,-110,-28,66,-82,17,-10,6,45,1,-1,7,89,35,34,20,3,-18,-76,14,-17,-17,8,-39,-80,54,-36,-127,43,-15,-58,-74,-20,-29,-1,-44,-19,23,16,-16,-5,83,127,-32, -127,-112,-21,127,-54,42,-83,127,-9,21,12,-7,51,21,7,-34,-49,53,34,24,19,126,10,127,118,-32,-33,35,65,-127,-42,-37,55,-12,-32,-100,10,27,-85,-74,-124,-27,-112,-127,37,80,80,93, -20,28,13,14,-22,20,40,52,-29,-50,-1,-1,-21,-3,8,6,-88,33,-64,-7,5,-33,127,20,-58,5,16,22,12,22,-5,26,-12,-21,-23,86,5,26,10,57,12,-30,30,-61,-3,78,8,-28, 
  /* [0][1][][] */ -10,11,-25,3,39,-118,127,-53,-57,23,15,31,127,31,12,-26,-19,-6,37,45,50,-76,25,3,-78,127,-67,-29,127,-98,58,-100,-45,-2,-73,-6,-1,-70,-55,-24,127,127,13,-127,-48,-55,5,64, 80,-127,127,6,127,47,-54,-32,-11,127,127,-127,-95,127,127,127,127,127,120,127,127,106,-2,-4,104,-102,-127,99,37,107,127,27,-127,127,127,127,-127,127,-127,-127,48,31,-127,-18,127,-127,-5,62, 13,86,-35,1,-47,127,-100,99,127,-92,37,54,-39,18,21,-58,-2,14,-127,26,32,-127,-29,-13,60,-12,-24,127,-85,-42,48,-1,-39,16,106,-5,30,10,-3,-83,119,0,37,51,-40,114,108,-87, 
  /* [0][2][][] */ 0,55,10,-24,6,-55,-3,11,-42,3,0,-2,-14,-6,14,-3,-46,30,36,-22,-1,-30,64,-20,-127,-2,33,-28,3,-9,-13,35,-14,-32,-55,10,-13,-13,17,12,-15,-4,-4,16,-3,23,-1,-6, 29,7,-29,-27,27,50,118,-76,97,-40,-19,-1,-70,-13,-14,-64,-14,86,9,21,28,21,-33,-43,-95,53,56,-9,-110,5,-35,19,-27,-25,-41,7,35,-23,-8,72,-100,-3,-23,58,41,63,20,-127, -13,73,9,-14,-17,19,3,-24,-69,-29,-15,-3,19,-4,-6,14,47,42,-27,-16,10,-31,-43,-24,3,-28,8,5,-24,-6,-19,35,22,-30,-10,-36,-22,14,30,-9,6,-12,2,7,-5,15,61,-58, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.013893585652112961, 0.0068143121898174286, 0.027184171602129936, 0.009717937558889389, 0.01219144556671381, 0.010843051597476006, 0.012041259557008743, 0.012326770462095737, 0.0053944275714457035, 0.014856974594295025, 0.010213084518909454, 0.040229387581348419, 0.01958182081580162, 0.011050302535295486, 0.012196799740195274, 0.036180898547172546, 0.005993502214550972, 0.0027301057707518339, 0.010229128412902355, 0.0084092635661363602, 0.0086233578622341156, 0.0087524363771080971, 0.004220389761030674, 0.019754223525524139, 0.0091895516961812973, 0.018765520304441452, 0.021949689835309982, 0.0077613801695406437, 0.0085605811327695847, 0.015047387219965458, 0.0093295173719525337, 0.006821128074079752, 0.0044485400430858135, 0.01093676034361124, 0.0073145367205142975, 0.016487631946802139, 0.086653709411621094, 0.016032740473747253, 0.0059092715382575989, 0.0062582874670624733, 0.0093218423426151276, 0.0077360398136079311, 0.011854079551994801, 0.0077490368857979774, 0.012957620434463024, 0.0034531201235949993, 0.0020712327677756548, 0.0091763604432344437, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 2285, 2222, 7120, 1041, 1464, -1620, 3652, 7603, 3054, -681, 3147, -1547, 9040, -1306, 1701, 18883, -610, 1226, 77, 1871, 2646, 3267, 211, 32974, 7642, 2250, 9215, 1080, 2698, 5603, 733, 994, 558, 1917, -255, 412, -2729, -424, 2270, 2207, 4359, 2939, 3367, 3253, 2654, 3723, 1966, 5664, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00027393357595428824, 0.00035206656320951879, 0.0001285545586142689, 0.00026581992278806865, 0.00031038201996125281, 0.00027471411158330739, 0.00020996396779082716, 0.00011552315118024126, 0.00021715383627451956, 0.00027771288296207786, 0.00023647387570235878, 0.00028784893220290542, 0.00010417097655590624, 0.00027118314756080508, 0.00028402823954820633, 6.0229896917007864e-05, 0.0003068484365940094, 0.00031285031582228839, 0.00029839936178177595, 0.00028553709853440523, 0.00024850675254128873, 0.0002254220744362101, 0.00047061158693395555, 3.5254703107057139e-05, 0.0001245836028829217, 0.00023267910000868142, 9.8412849183660001e-05, 0.00032817761530168355, 0.00027417117962613702, 0.00014587727491743863, 0.00044784645433537662, 0.00035934528568759561, 0.00026212475495412946, 0.00020287017105147243, 0.00035610850318334997, 0.0003096578293479979, 0.00023831414000596851, 0.00031730640330351889, 0.00025017955340445042, 0.00025872566038742661, 0.00018991049728356302, 0.00019846839131787419, 0.0002379544748691842, 0.00023329394753091037, 0.0002360227081226185, 0.00021984888007864356, 0.00031250956817530096, 0.00015514304686803371, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 47,127,-56,-85,23,90,35,68, 
  /* [1][0][][] */ 44,-64,43,-127,-44,63,-53,-47, 
  /* [2][0][][] */ -43,119,127,29,98,20,65,7, 
  /* [3][0][][] */ 127,24,-86,80,-35,-90,-106,-40, 
  /* [4][0][][] */ -28,40,-4,-85,-32,99,127,76, 
  /* [5][0][][] */ 25,76,-127,-66,58,69,10,-24, 
  /* [6][0][][] */ -53,118,58,57,64,45,38,-127, 
  /* [7][0][][] */ 127,-7,-11,26,24,27,79,36, 
  /* [8][0][][] */ 74,127,30,57,111,59,87,-69, 
  /* [9][0][][] */ 26,127,-114,-73,-11,124,12,73, 
  /* [10][0][][] */ -46,-38,5,-52,-16,-34,-32,127, 
  /* [11][0][][] */ 5,-127,-119,-35,16,-2,50,8, 
  /* [12][0][][] */ 5,-119,-127,-36,-96,27,-61,44, 
  /* [13][0][][] */ 6,9,-106,100,-127,-27,11,-12, 
  /* [14][0][][] */ -53,-24,-127,0,32,-10,-22,-61, 
  /* [15][0][][] */ 7,-106,-127,12,-108,-16,-9,-23, 
  /* [16][0][][] */ 127,-66,-11,49,-60,32,42,113, 
  /* [17][0][][] */ -12,102,127,-12,-35,-21,-27,-35, 
  /* [18][0][][] */ 11,-127,38,83,4,-50,66,-108, 
  /* [19][0][][] */ 127,-31,-68,47,-100,5,37,84, 
  /* [20][0][][] */ -27,-127,80,80,-19,-91,2,-89, 
  /* [21][0][][] */ -6,-62,-21,-23,127,0,47,10, 
  /* [22][0][][] */ -127,11,-56,58,45,62,-70,-110, 
  /* [23][0][][] */ -81,-65,33,-27,-120,115,127,-51, 
  /* [24][0][][] */ -20,39,-26,-19,-47,127,119,-12, 
  /* [25][0][][] */ -29,-107,-127,-85,-31,4,2,-25, 
  /* [26][0][][] */ -22,55,-56,127,-121,39,-39,-21, 
  /* [27][0][][] */ 20,-108,32,83,5,-49,9,-127, 
  /* [28][0][][] */ 17,127,28,14,104,-41,5,-69, 
  /* [29][0][][] */ 47,58,-8,12,108,-127,-110,88, 
  /* [30][0][][] */ 24,-8,13,-127,-4,-36,13,-35, 
  /* [31][0][][] */ 37,-39,16,58,-17,44,28,127, 
  /* [32][0][][] */ -127,-108,8,-84,-42,127,64,106, 
  /* [33][0][][] */ -22,36,38,-51,58,117,-127,90, 
  /* [34][0][][] */ 28,127,-60,-24,17,54,-60,45, 
  /* [35][0][][] */ 15,-127,58,76,-33,-52,59,-76, 
  /* [36][0][][] */ -24,-27,-68,-4,-127,-32,-4,12, 
  /* [37][0][][] */ -61,-127,82,105,-68,-83,-6,-70, 
  /* [38][0][][] */ -88,10,59,-81,-127,-76,-47,93, 
  /* [39][0][][] */ 71,-127,59,50,-29,-57,-13,-66, 
  /* [40][0][][] */ -2,61,38,42,-127,-3,-53,20, 
  /* [41][0][][] */ 123,127,-90,-95,38,11,-25,-2, 
  /* [42][0][][] */ -2,-35,-24,12,127,3,31,7, 
  /* [43][0][][] */ 127,21,62,17,-56,-35,50,100, 
  /* [44][0][][] */ 54,70,-24,6,57,-90,-127,27, 
  /* [45][0][][] */ 71,0,24,41,59,-127,-25,-60, 
  /* [46][0][][] */ 46,-23,0,127,35,62,27,64, 
  /* [47][0][][] */ -51,-83,24,26,-54,1,127,-88, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0034927334636449814, 0.0044889519922435284, 0.0016391084063798189, 0.003389282152056694, 0.0039574620313942432, 0.0035026855766773224, 0.0026771023403853178, 0.0014729541726410389, 0.0027687752153724432, 0.0035409207921475172, 0.0030151114333420992, 0.0036701583303511143, 0.0013282105792313814, 0.0034576647449284792, 0.0036214436404407024, 0.00076794886263087392, 0.0039124079048633575, 0.0039889332838356495, 0.0038046794943511486, 0.0036406817380338907, 0.003168534254655242, 0.0028741976711899042, 0.0060004359111189842, 0.00044950784649699926, 0.0015884775202721357, 0.0029667268972843885, 0.0012547927908599377, 0.0041843610815703869, 0.0034957630559802055, 0.001859978074207902, 0.0057101738639175892, 0.0045817578211426735, 0.0033421677071601152, 0.0025866543874144554, 0.0045404881238937378, 0.0039482284337282181, 0.0030385754071176052, 0.0040457500144839287, 0.0031898627057671547, 0.0032988283783197403, 0.0024214147124439478, 0.0025305303279310465, 0.0030339895747601986, 0.0029745663050562143, 0.003009358886629343, 0.0028031377587467432, 0.0039845886640250683, 0.0019781193695962429, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 5780, 16332, -3348, 5813, 907, 1099, -10916, -17100, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00020921163377352059, 0.00013070579734630883, 0.00021403495338745415, 0.00015417487884406, 0.00018122620531357825, 0.00013672845670953393, 0.00021004429436288774, 0.00011875269410666078, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -41,-13,44,4,-28,-18,2,2,-40,6,-57,-52,-19,-63,-3,-33,45,-46,38,42,-11,34,-25,26,-7,-41,62,-6,5,-17,29,4,86,43,35,-127,11,-2,-21,-24,11,-24,47,44,42,7,32,-8, 
  /* [1][0][][] */ -5,36,54,-21,-20,50,-52,-26,8,20,-8,-90,6,93,0,44,-17,29,-21,-61,22,-60,-29,21,-68,-15,-8,-106,-13,-7,27,-55,56,72,-44,-2,127,-42,-8,49,-30,41,-71,-47,109,-19,-33,-37, 
  /* [2][0][][] */ 3,-24,-60,10,-10,44,26,-2,-3,47,-17,34,52,-96,15,-75,36,-87,34,41,-36,40,-15,28,-22,73,-30,-67,14,14,18,-59,-61,-91,26,-21,104,8,-18,-57,-4,22,74,40,127,17,12,22, 
  /* [3][0][][] */ -10,16,-69,27,9,-27,-64,-104,14,-13,-28,9,10,29,29,80,-5,11,-23,21,9,-93,38,-40,-75,0,127,-1,-31,4,-57,10,7,-75,1,-11,-16,-34,-16,98,-45,-45,5,14,46,1,-31,34, 
  /* [4][0][][] */ -29,-38,-10,7,29,-29,-11,-3,32,-36,53,-87,8,26,14,3,-17,-19,14,-16,-12,-49,-7,-24,24,-15,39,39,33,28,-25,34,-14,-5,-2,7,-61,78,26,-32,23,-19,-17,-27,-83,17,127,3, 
  /* [5][0][][] */ 43,-27,0,21,30,-40,31,-127,27,-21,-11,118,-67,59,30,-57,3,-89,23,7,-36,54,-42,-37,-65,82,-12,4,-18,43,-29,-24,20,40,26,0,-36,-2,-31,-41,20,-40,-38,-7,-20,48,88,16, 
  /* [6][0][][] */ 48,-20,29,-6,-43,-23,-43,19,-47,2,-46,127,-46,-41,-4,54,11,42,4,34,37,-78,-12,29,21,37,-63,10,9,-51,17,41,8,15,-26,-10,1,2,5,5,-8,-27,37,44,-4,-39,69,-11, 
  /* [7][0][][] */ -16,-1,5,57,44,24,8,22,25,13,48,3,114,94,55,51,43,38,-6,9,1,-31,-91,-24,8,4,-31,57,20,-24,-26,-7,17,11,47,-69,-69,50,45,44,-18,26,71,127,-52,-23,-91,66, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0088914940133690834, 0.0055549964308738708, 0.0090964855626225471, 0.0065524321980774403, 0.0077021135948598385, 0.0058109592646360397, 0.0089268824085593224, 0.0050469893030822277, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 8130, 2821, 6272, -3569, 7884, -5008, -1085, 39800, -4808, 4492, 9446, 49869, 1677, 9848, 1146, 13476, 2093, 12520, -1783, 8285, 13296, 1921, 5208, -8160, 25518, 1474, 6534, 15722, -4710, 4663, -11965, 10227, 7164, 1986, -1432, 5012, -9406, 13085, -2198, 14311, 58, -3888, 16159, 694, 1545, 2253, 3, -1349, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 8.800673094810918e-05, 7.9002340498846024e-05, 0.00013879788457415998, 0.00022486495436169207, 0.00054027402075007558, 0.00017046779976226389, 0.0001954922336153686, 6.8471097620204091e-05, 0.00015859479026403278, 9.7926073067355901e-05, 6.0534071963047609e-05, 7.3104747571051121e-05, 9.4337861810345203e-05, 5.0776270654750988e-05, 0.00020812616276089102, 0.00014729086251463741, 0.00010471158748259768, 0.00043143061338923872, 0.00011822554370155558, 0.00011708470265148208, 9.377417154610157e-05, 0.00032343200291506946, 0.00014487915905192494, 0.00022463049390353262, 4.5168701035436243e-05, 9.0427740360610187e-05, 5.0386985094519332e-05, 0.00010054258746095002, 0.00011111597996205091, 0.00080667587462812662, 0.00016773394600022584, 6.236890476429835e-05, 0.00013298260455485433, 0.00011771457502618432, 0.00015089128282852471, 5.9095775213791057e-05, 0.00011136903776787221, 3.7087575037730858e-05, 0.00014345142699312419, 9.0777844889089465e-05, 0.00014337647007778287, 0.00022292487847153097, 3.8872727600391954e-05, 0.00011629715299932286, 6.2240251281764358e-05, 0.00034261570544913411, 8.1504804256837815e-05, 0.00025112184812314808, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -35,-95,-28,-2,127,-29,66,-34,-58,-85,-24,-60,110,33,33,-92,48,-26,23,-42,-127,97,19,16,1,99,64,-34,96,-104,16,-47,-127,-102,56,76,2,106,96,-80,-120,1,68,83,54,-127,85,97, -34,-127,-82,58,-113,103,58,-58,-40,23,59,-127,127,88,76,-81,-105,-56,37,-45,-101,16,-81,95,-112,127,127,-127,114,-68,14,-127,-77,-127,80,126,97,101,127,-43,-127,-34,122,81,90,86,80,79, 22,-61,-112,93,-66,-6,26,-19,112,11,52,-85,6,77,-54,-12,-105,-6,38,-32,-60,-56,-126,-9,-76,50,32,-94,51,45,127,-26,-26,-14,-6,69,75,48,65,24,-28,92,75,-2,18,12,4,-106, 
  /* [0][1][][] */ -96,-55,-23,-46,-108,-36,77,-127,-98,-127,71,-44,60,28,-121,-89,127,-127,-49,-44,-95,127,-1,23,-13,67,73,-61,-103,-110,6,-47,-62,-112,-127,50,18,95,12,-54,52,-1,92,127,70,94,113,-97, -127,-83,-116,-71,-52,127,127,-98,110,45,127,-87,94,127,35,-127,44,-80,-127,-127,-115,84,-127,127,-110,104,123,-110,-127,127,-5,-103,-81,-123,36,127,127,127,1,-127,79,-64,127,123,127,-12,127,127, -59,-35,-127,127,61,-21,26,-42,95,14,20,-23,19,73,49,-82,-21,2,-25,-78,-65,-62,-63,-20,-127,9,47,-80,-42,36,118,-53,-25,-14,67,94,66,78,-15,-26,32,127,70,13,31,-59,9,37, 
  /* [0][2][][] */ -47,-22,5,36,-72,-6,37,-64,52,-52,21,-46,-20,3,-56,-23,-97,-32,124,-12,-8,-57,-62,-5,-16,8,53,-13,53,38,-7,-36,-38,-109,-26,58,33,7,-52,-15,25,9,45,40,13,41,24,-41, -59,-22,-35,-46,74,50,47,-54,127,20,-34,-65,-11,45,-127,-109,35,-17,67,-53,-45,-87,-25,50,-45,26,66,-29,50,-12,-26,-72,-72,-31,-44,55,38,19,-96,-49,20,-22,74,54,59,-106,19,22, -26,-49,-60,-1,-47,11,13,-46,-30,3,-9,-27,-21,8,12,-55,31,31,10,-37,-33,-77,-30,-33,-71,-27,34,-36,24,-72,71,-33,-78,2,26,51,3,19,-43,-11,-17,54,2,-1,20,-25,-2,56, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0037402859888970852, 0.0033575992565602064, 0.0058989101089537144, 0.0095567600801587105, 0.02296164445579052, 0.0072448812425136566, 0.0083084199577569962, 0.0029100214596837759, 0.0067402785643935204, 0.0041618579998612404, 0.0025726980529725552, 0.0031069517135620117, 0.0040093590505421162, 0.0021579915191978216, 0.0088453618809580803, 0.0062598614022135735, 0.0044502425007522106, 0.018335800617933273, 0.0050245854072272778, 0.0049760998226702213, 0.0039854021742939949, 0.013745859265327454, 0.0061573642306029797, 0.0095467958599328995, 0.0019196696812286973, 0.0038431789726018906, 0.0021414468064904213, 0.0042730597779154778, 0.0047224289737641811, 0.034283723682165146, 0.0071286926977336407, 0.0026506783906370401, 0.0056517603807151318, 0.0050028692930936813, 0.0064128790982067585, 0.0025115704629570246, 0.0047331838868558407, 0.0015762218972668052, 0.0060966857708990574, 0.0038580582477152348, 0.0060934997163712978, 0.0094743072986602783, 0.0016520909266546369, 0.0049426290206611156, 0.0026452105958014727, 0.014561166986823082, 0.0034639541991055012, 0.010672678239643574, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 976, -884, -169, 1548, 12365, 1368, -395, 3122, 1074, 977, -197, 5462, 504, 201, -1136, 893, 2591, 10756, 1841, -602, 1008, -1698, -24, 2321, -342, -1030, 983, -80, 2710, 10523, 2336, -124, 634, -48, 1260, -33, 634, -133, 1301, 890, 884, 1573, -66, -352, 1215, 1875, 1699, -297, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00050738651771098375, 0.00033919163979589939, 0.00035386611125431955, 0.00030270274146459997, 8.6280917457770556e-05, 0.00042611098615452647, 0.00059015071019530296, 0.00028253626078367233, 0.00033215319854207337, 0.0007136794738471508, 0.00029018009081482887, 0.00018323534459341317, 0.00028689124155789614, 0.00047874869778752327, 0.0003103629860561341, 0.00034214806510135531, 0.00028778545674867928, 9.054813563125208e-05, 0.00037896292633377016, 0.00041900610085576773, 0.00033441372215747833, 0.00020202109590172768, 0.00044205409358255565, 0.00034734618384391069, 0.00045285446685738862, 0.00056601554388180375, 0.0004232792416587472, 0.0005504435976035893, 0.00028309941990301013, 9.6495838079135865e-05, 0.00035225693136453629, 0.00079303828533738852, 0.00037256101495586336, 0.00050592416664585471, 0.00047455710591748357, 0.0003551968839019537, 0.00028538616606965661, 0.00048338298802264035, 0.00036048542824573815, 0.00065318675478920341, 0.00049385946476832032, 0.00033963139867410064, 0.0003944291383959353, 0.00047404511133208871, 0.0002760637435130775, 0.00030049670021981001, 0.00027503000455908477, 0.00033486390020698309, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -27,25,-3,-14,-72,-10,-127,49, 
  /* [1][0][][] */ 81,-86,-43,-66,127,-110,124,46, 
  /* [2][0][][] */ -84,124,-55,-127,57,-3,-30,34, 
  /* [3][0][][] */ 25,35,75,-17,81,119,127,-9, 
  /* [4][0][][] */ -71,-91,44,5,-29,-127,-11,-50, 
  /* [5][0][][] */ 127,-13,76,42,-68,-3,21,-13, 
  /* [6][0][][] */ 29,44,127,-31,52,-32,-39,29, 
  /* [7][0][][] */ 28,6,-127,-22,-32,89,75,-64, 
  /* [8][0][][] */ -11,127,-22,-5,45,91,47,59, 
  /* [9][0][][] */ -6,127,-81,115,5,-89,55,123, 
  /* [10][0][][] */ 1,-127,16,-20,-99,-117,-31,-61, 
  /* [11][0][][] */ -127,-92,112,59,-15,-77,114,65, 
  /* [12][0][][] */ -23,62,-127,81,45,-38,-57,107, 
  /* [13][0][][] */ 76,-127,80,84,-3,35,21,-44, 
  /* [14][0][][] */ -45,120,-60,-127,-22,-92,-44,-46, 
  /* [15][0][][] */ 35,122,20,-7,52,-50,101,-127, 
  /* [16][0][][] */ -127,-103,-78,107,-55,63,-9,99, 
  /* [17][0][][] */ -40,-115,-127,102,-61,83,-57,92, 
  /* [18][0][][] */ -83,-68,-30,52,-8,83,23,127, 
  /* [19][0][][] */ 52,-127,100,-122,-7,-59,33,-33, 
  /* [20][0][][] */ -23,79,47,12,13,127,96,17, 
  /* [21][0][][] */ 22,125,48,-27,39,-64,114,-127, 
  /* [22][0][][] */ 9,17,127,20,-23,124,48,-38, 
  /* [23][0][][] */ -102,-43,51,-94,83,79,-36,-127, 
  /* [24][0][][] */ -93,-86,22,-80,127,125,-67,-125, 
  /* [25][0][][] */ 127,15,-73,-19,19,41,-60,-10, 
  /* [26][0][][] */ -116,-47,-127,-19,-58,-28,3,5, 
  /* [27][0][][] */ 97,39,2,-69,-127,-33,90,96, 
  /* [28][0][][] */ -112,-76,22,20,-41,-127,-6,22, 
  /* [29][0][][] */ 95,73,24,-127,42,24,-46,-69, 
  /* [30][0][][] */ -79,-62,54,-76,60,65,-33,-127, 
  /* [31][0][][] */ 55,37,-16,127,12,-56,0,6, 
  /* [32][0][][] */ -13,127,7,39,14,70,2,51, 
  /* [33][0][][] */ -24,127,-65,23,26,-25,-33,9, 
  /* [34][0][][] */ -127,-57,-48,64,4,-11,-4,120, 
  /* [35][0][][] */ -52,127,-24,-9,63,89,50,67, 
  /* [36][0][][] */ 63,11,6,-27,-127,-43,110,83, 
  /* [37][0][][] */ -77,117,49,4,-127,103,-7,-85, 
  /* [38][0][][] */ 58,35,35,37,124,51,127,78, 
  /* [39][0][][] */ -27,-63,47,-5,-2,35,-67,127, 
  /* [40][0][][] */ -77,-22,-76,127,-16,-10,24,65, 
  /* [41][0][][] */ 127,22,84,108,-85,-9,29,-15, 
  /* [42][0][][] */ -61,-3,-78,-127,43,-106,-4,77, 
  /* [43][0][][] */ 16,-7,78,-4,34,127,74,7, 
  /* [44][0][][] */ -20,-30,-67,127,53,11,-34,-54, 
  /* [45][0][][] */ 36,111,68,-112,74,-35,37,-127, 
  /* [46][0][][] */ -44,-127,-52,34,5,35,-65,124, 
  /* [47][0][][] */ 48,49,96,30,89,127,91,-16, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0048727579414844513, 0.0032574746292084455, 0.0033984030596911907, 0.0029070484451949596, 0.00082861096598207951, 0.0040922169573605061, 0.0056675951927900314, 0.0027133766561746597, 0.0031898799352347851, 0.0068539213389158249, 0.002786785364151001, 0.0017597264377400279, 0.0027552004903554916, 0.0045977304689586163, 0.0029806145466864109, 0.0032858671620488167, 0.002763788215816021, 0.00086959177860990167, 0.0036394237540662289, 0.0040239840745925903, 0.0032115892972797155, 0.0019401380559429526, 0.0042453287169337273, 0.0033357879146933556, 0.004349051509052515, 0.0054358099587261677, 0.0040650218725204468, 0.0052862623706459999, 0.0027187850791960955, 0.00092671136371791363, 0.0033829489257186651, 0.0076160547323524952, 0.0035779422614723444, 0.0048587140627205372, 0.0045574759133160114, 0.0034111833665519953, 0.0027407461311668158, 0.0046422365121543407, 0.0034619725774973631, 0.0062729711644351482, 0.0047428486868739128, 0.0032616979442536831, 0.0037879557348787785, 0.004552558995783329, 0.0026512169279158115, 0.0028858622536063194, 0.0026412892621010542, 0.0032159127295017242, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -7276, -3429, 10925, -8704, 21683, 7462, -9009, 10939, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00021979359735269099, 0.00025366074987687171, 0.00016562688688281924, 0.00028268556343391538, 0.00019707578758243471, 0.00017695092537906021, 0.0001849201216828078, 0.00023478736693505198, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -8,-2,-19,-68,-27,-35,12,-22,38,3,-27,6,106,127,-18,-92, 
  /* [1][0][][] */ 127,-48,-36,5,-34,67,-75,-54,-40,82,-28,-45,-8,8,-56,-12, 
  /* [2][0][][] */ -43,-103,37,40,55,-41,-74,-17,35,-93,19,-127,50,-29,-79,27, 
  /* [3][0][][] */ 36,6,15,8,-10,61,-57,-29,127,43,8,13,8,-12,10,15, 
  /* [4][0][][] */ -73,-23,-33,-117,-13,39,37,-111,22,-5,-42,-32,-127,40,-35,-16, 
  /* [5][0][][] */ 91,49,73,-21,30,-50,-126,-127,-23,-72,73,42,-63,48,53,-37, 
  /* [6][0][][] */ 91,40,-114,-69,41,-65,7,-83,-34,23,-127,96,96,-86,22,82, 
  /* [7][0][][] */ -127,0,91,-18,-58,9,5,-52,-43,55,76,-27,61,-30,38,20, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0093412278220057487, 0.010780581273138523, 0.0070391423068940639, 0.012014136649668217, 0.0083757210522890091, 0.0075204144231975079, 0.0078591052442789078, 0.0099784629419445992, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 20031, 98, -378, 4130, -2017, 769, 8812, 627, 370, 426, -1266, 2685, 3145, -1346, 317, -387, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.00012229048297740519, 0.00024049911007750779, 0.00019966108084190637, 0.00014521433331537992, 0.00097680487670004368, 0.00086243590340018272, 0.00022651618928648531, 0.00094629317754879594, 0.00022077694302424788, 0.001632804749533534, 0.00025840243324637413, 0.00019229429017286748, 8.075892401393503e-05, 0.00022457570594269782, 0.00024075490364339203, 0.0012015093816444278, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -5,-10,-3,-4,-15,9,-2,16,0,-11,-9,-16,8,0,-11,-7, 3,-13,-8,-8,14,-4,5,-25,-4,9,-14,82,-1,27,-7,-6, 1,-16,-16,-10,7,-16,-5,12,6,1,-13,-14,7,-1,-13,-7, 
  /* [0][1][][] */ 18,-18,-7,-3,127,-26,-127,-19,127,127,-2,-11,114,-18,-10,-25, -127,127,127,-9,-78,-95,-15,-98,17,-106,127,127,127,127,127,127, 25,-6,-3,-7,-4,127,10,-8,0,-14,-16,-13,10,-3,-21,-15, 
  /* [0][2][][] */ 8,-17,-10,-21,-17,14,39,8,-5,-8,-12,1,-11,3,-17,-17, 27,-23,-15,-127,7,-18,-11,127,-5,1,-8,-20,-4,-56,-20,-42, 8,-16,-12,-17,6,-6,1,0,2,1,-11,-4,1,-5,-20,-17, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0051973452791571617, 0.010221212171018124, 0.0084855956956744194, 0.0061716092750430107, 0.041514206677675247, 0.036653526127338409, 0.0096269380301237106, 0.040217459201812744, 0.0093830199912190437, 0.069394201040267944, 0.01098210271447897, 0.0081725073978304863, 0.0034322543069720268, 0.0095444675534963608, 0.01023208349943161, 0.051064148545265198, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { 1333, -104, 1529, -343, 47293, 24318, 7193, 15935, 1961, 17805, 2093, -714, 4552, 14587, 89, 13338, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00027648298419080675, 0.00080964813241735101, 0.00031178703648038208, 0.00023753070854581892, 2.6258428988512605e-05, 5.2192983275745064e-05, 0.00015716039342805743, 3.1872725230641663e-05, 0.00027158719603903592, 3.4074433642672375e-05, 0.00046975305303931236, 0.00056824885541573167, 0.00045599881559610367, 1.9095106836175546e-05, 0.0005684223142452538, 4.9130823754239827e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -86, -110, -31, 
  /* [0][1][][] */ 66, -37, 16, 
  /* [0][2][][] */ 32, 127, 19, 
  /* [1][0][][] */ 106, -95, -10, 
  /* [1][1][][] */ -127, 105, 24, 
  /* [1][2][][] */ 14, -1, -13, 
  /* [2][0][][] */ -27, -5, -52, 
  /* [2][1][][] */ 34, 94, 127, 
  /* [2][2][][] */ -15, -99, -84, 
  /* [3][0][][] */ 122, 127, 60, 
  /* [3][1][][] */ 4, -19, -12, 
  /* [3][2][][] */ -97, -123, -41, 
  /* [4][0][][] */ 49, -53, -12, 
  /* [4][1][][] */ 55, -127, -8, 
  /* [4][2][][] */ 20, -118, -34, 
  /* [5][0][][] */ -60, 35, 5, 
  /* [5][1][][] */ -127, 37, 11, 
  /* [5][2][][] */ -91, 24, 9, 
  /* [6][0][][] */ -23, 77, 127, 
  /* [6][1][][] */ -59, 52, -22, 
  /* [6][2][][] */ -44, -60, -98, 
  /* [7][0][][] */ 60, 39, -24, 
  /* [7][1][][] */ 127, 60, -28, 
  /* [7][2][][] */ 35, 2, -28, 
  /* [8][0][][] */ -18, -27, 54, 
  /* [8][1][][] */ -50, -82, 127, 
  /* [8][2][][] */ -23, -57, 97, 
  /* [9][0][][] */ -18, 54, 5, 
  /* [9][1][][] */ -12, 127, -3, 
  /* [9][2][][] */ -11, 81, -2, 
  /* [10][0][][] */ 22, 84, 10, 
  /* [10][1][][] */ -38, -127, -31, 
  /* [10][2][][] */ 10, 37, 15, 
  /* [11][0][][] */ 8, -17, 11, 
  /* [11][1][][] */ 65, -91, 36, 
  /* [11][2][][] */ -83, 127, -44, 
  /* [12][0][][] */ -43, 46, -12, 
  /* [12][1][][] */ -127, 110, 3, 
  /* [12][2][][] */ -79, 75, 3, 
  /* [13][0][][] */ 127, 64, 21, 
  /* [13][1][][] */ 117, 86, 3, 
  /* [13][2][][] */ 42, 82, 12, 
  /* [14][0][][] */ -30, -27, 48, 
  /* [14][1][][] */ 45, 99, -127, 
  /* [14][2][][] */ -16, -70, 81, 
  /* [15][0][][] */ -97, -16, 40, 
  /* [15][1][][] */ -127, -120, 38, 
  /* [15][2][][] */ -11, -64, 2, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.070503160357475281, 0.20646026730537415, 0.079505689442157745, 0.060570325702428818, 0.0066958991810679436, 0.013309209607541561, 0.040075898170471191, 0.0081275440752506256, 0.069254733622074127, 0.0086889797821640968, 0.11978702247142792, 0.14490345120429993, 0.11627969145774841, 0.0048692519776523113, 0.14494767785072327, 0.012528358958661556, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.1041271761059761, } };
const TfArray<1, int> quant46_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.078429564833641052, } };
const TfArray<1, int> quant50_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.05903494730591774, } };
const TfArray<1, int> quant53_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.10865360498428345, } };
const TfArray<1, int> quant54_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.052366495132446289, } };
const TfArray<1, int> quant58_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.054065529257059097, } };
const TfArray<1, int> quant61_zero = { 1, { -29 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.069382458925247192, } };
const TfArray<1, int> quant62_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.044509962201118469, } };
const TfArray<1, int> quant65_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.08811911940574646, } };
const TfArray<1, int> quant66_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.051780488342046738, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,4 } };
const TfArray<1, float> quant69_scale = { 1, { 0.16465689241886139, } };
const TfArray<1, int> quant69_zero = { 1, { -35 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,4 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 576), (TfLiteIntArray*)&g0::tensor_dimension69, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
